"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-9235
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from intersight.model.certificatemanagement_certificate_base import CertificatemanagementCertificateBase
    from intersight.model.compute_persistent_memory_operation import ComputePersistentMemoryOperation
    from intersight.model.compute_physical_relationship import ComputePhysicalRelationship
    from intersight.model.compute_server_config import ComputeServerConfig
    from intersight.model.compute_server_op_status import ComputeServerOpStatus
    from intersight.model.compute_storage_controller_operation import ComputeStorageControllerOperation
    from intersight.model.compute_storage_physical_drive_operation import ComputeStoragePhysicalDriveOperation
    from intersight.model.compute_storage_virtual_drive_operation import ComputeStorageVirtualDriveOperation
    from intersight.model.equipment_locator_led_relationship import EquipmentLocatorLedRelationship
    from intersight.model.workflow_workflow_info_relationship import WorkflowWorkflowInfoRelationship
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['CertificatemanagementCertificateBase'] = CertificatemanagementCertificateBase
    globals()['ComputePersistentMemoryOperation'] = ComputePersistentMemoryOperation
    globals()['ComputePhysicalRelationship'] = ComputePhysicalRelationship
    globals()['ComputeServerConfig'] = ComputeServerConfig
    globals()['ComputeServerOpStatus'] = ComputeServerOpStatus
    globals()['ComputeStorageControllerOperation'] = ComputeStorageControllerOperation
    globals()['ComputeStoragePhysicalDriveOperation'] = ComputeStoragePhysicalDriveOperation
    globals()['ComputeStorageVirtualDriveOperation'] = ComputeStorageVirtualDriveOperation
    globals()['EquipmentLocatorLedRelationship'] = EquipmentLocatorLedRelationship
    globals()['WorkflowWorkflowInfoRelationship'] = WorkflowWorkflowInfoRelationship


class ComputeServerSettingAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'COMPUTE.SERVERSETTING': "compute.ServerSetting",
        },
        ('object_type',): {
            'COMPUTE.SERVERSETTING': "compute.ServerSetting",
        },
        ('admin_locator_led_state',): {
            'NONE': "None",
            'ON': "On",
            'OFF': "Off",
        },
        ('admin_power_state',): {
            'POLICY': "Policy",
            'POWERON': "PowerOn",
            'POWEROFF': "PowerOff",
            'POWERCYCLE': "PowerCycle",
            'HARDRESET': "HardReset",
            'SHUTDOWN': "Shutdown",
            'REBOOT': "Reboot",
        },
        ('cmos_reset',): {
            'READY': "Ready",
            'PENDING': "Pending",
            'RESET': "Reset",
        },
        ('config_state',): {
            'APPLIED': "Applied",
            'APPLYING': "Applying",
            'SCHEDULED': "Scheduled",
            'FAILED': "Failed",
        },
        ('front_panel_lock_state',): {
            'UNLOCK': "Unlock",
            'LOCK': "Lock",
        },
        ('kvm_reset',): {
            'READY': "Ready",
            'RESET': "Reset",
        },
        ('tpm_reset',): {
            'NONE': "None",
            'CLEARTPM': "ClearTpm",
        },
        ('tunneled_kvm_state',): {
            'READY': "Ready",
            'ENABLE': "Enable",
            'DISABLE': "Disable",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'admin_locator_led_state': (str,),  # noqa: E501
            'admin_power_state': (str,),  # noqa: E501
            'certificates_action': (CertificatemanagementCertificateBase,),  # noqa: E501
            'cmos_reset': (str,),  # noqa: E501
            'config_state': (str,),  # noqa: E501
            'front_panel_lock_state': (str,),  # noqa: E501
            'kvm_reset': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'one_time_boot_device': (str,),  # noqa: E501
            'persistent_memory_operation': (ComputePersistentMemoryOperation,),  # noqa: E501
            'server_config': (ComputeServerConfig,),  # noqa: E501
            'server_op_status': ([ComputeServerOpStatus], none_type,),  # noqa: E501
            'storage_controller_operation': (ComputeStorageControllerOperation,),  # noqa: E501
            'storage_physical_drive_operation': (ComputeStoragePhysicalDriveOperation,),  # noqa: E501
            'storage_virtual_drive_operation': (ComputeStorageVirtualDriveOperation,),  # noqa: E501
            'tpm_reset': (str,),  # noqa: E501
            'tunneled_kvm_state': (str,),  # noqa: E501
            'locator_led': (EquipmentLocatorLedRelationship,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
            'running_workflow': (WorkflowWorkflowInfoRelationship,),  # noqa: E501
            'server': (ComputePhysicalRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'admin_locator_led_state': 'AdminLocatorLedState',  # noqa: E501
        'admin_power_state': 'AdminPowerState',  # noqa: E501
        'certificates_action': 'CertificatesAction',  # noqa: E501
        'cmos_reset': 'CmosReset',  # noqa: E501
        'config_state': 'ConfigState',  # noqa: E501
        'front_panel_lock_state': 'FrontPanelLockState',  # noqa: E501
        'kvm_reset': 'KvmReset',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'one_time_boot_device': 'OneTimeBootDevice',  # noqa: E501
        'persistent_memory_operation': 'PersistentMemoryOperation',  # noqa: E501
        'server_config': 'ServerConfig',  # noqa: E501
        'server_op_status': 'ServerOpStatus',  # noqa: E501
        'storage_controller_operation': 'StorageControllerOperation',  # noqa: E501
        'storage_physical_drive_operation': 'StoragePhysicalDriveOperation',  # noqa: E501
        'storage_virtual_drive_operation': 'StorageVirtualDriveOperation',  # noqa: E501
        'tpm_reset': 'TpmReset',  # noqa: E501
        'tunneled_kvm_state': 'TunneledKvmState',  # noqa: E501
        'locator_led': 'LocatorLed',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
        'running_workflow': 'RunningWorkflow',  # noqa: E501
        'server': 'Server',  # noqa: E501
    }

    read_only_vars = {
        'config_state',  # noqa: E501
        'name',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ComputeServerSettingAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "compute.ServerSetting", must be one of ["compute.ServerSetting", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "compute.ServerSetting", must be one of ["compute.ServerSetting", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_locator_led_state (str): User configured state of the locator LED for the server. * `None` - No operation property for locator led. * `On` - The Locator Led is turned on. * `Off` - The Locator Led is turned off.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            admin_power_state (str): User configured power state of the server. * `Policy` - Power state is set to the default value in the policy. * `PowerOn` - Power state of the server is set to On. * `PowerOff` - Power state is the server set to Off. * `PowerCycle` - Power state the server is reset. * `HardReset` - Power state the server is hard reset. * `Shutdown` - Operating system on the server is shut down. * `Reboot` - Power state of IMC is rebooted.. [optional] if omitted the server will use the default value of "Policy"  # noqa: E501
            certificates_action (CertificatemanagementCertificateBase): [optional]  # noqa: E501
            cmos_reset (str): The allowed actions on the CMOS Reset. * `Ready` - CMOS Reset operation is allowed to be done on the server in this state. * `Pending` - The identifier to state that the previous CMOS Reset operation on this server has not completed due to a pending power cycle. CMOS Reset operation cannot be done on the server when in this state. * `Reset` - The value that the UI/API needs to provide to trigger a CMOS Reset operation on a server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            config_state (str): The configured state of these settings in the target server. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target server. Applying - This state denotes that the settings are being applied in the target server. Failed - This state denotes that the settings could not be applied in the target server. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Scheduled` - User configured settings are scheduled to be applied. * `Failed` - User configured settings could not be applied.. [optional] if omitted the server will use the default value of "Applied"  # noqa: E501
            front_panel_lock_state (str): The allowed actions on the Front Panel Lock. * `Unlock` - Front Panel of the server is set to Unlocked state. * `Lock` - Front Panel of the server is set to Locked state.. [optional] if omitted the server will use the default value of "Unlock"  # noqa: E501
            kvm_reset (str): The allowed actions on the vKVM Reset. * `Ready` - Reset vKVM operation is allowed to be done on the server in this state. * `Reset` - The value that the UI/API needs to provide to trigger a Reset vKVM operation on a server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            name (str): The property used to identify the name of the server it is associated with.. [optional]  # noqa: E501
            one_time_boot_device (str): The name of the device chosen by user for configuring One-Time Boot device.. [optional]  # noqa: E501
            persistent_memory_operation (ComputePersistentMemoryOperation): [optional]  # noqa: E501
            server_config (ComputeServerConfig): [optional]  # noqa: E501
            server_op_status ([ComputeServerOpStatus], none_type): [optional]  # noqa: E501
            storage_controller_operation (ComputeStorageControllerOperation): [optional]  # noqa: E501
            storage_physical_drive_operation (ComputeStoragePhysicalDriveOperation): [optional]  # noqa: E501
            storage_virtual_drive_operation (ComputeStorageVirtualDriveOperation): [optional]  # noqa: E501
            tpm_reset (str): Clear the configuration of TPM chip in the server. * `None` - Perform no action on the TPM. * `ClearTpm` - Clear the configuration and restore factory defaults of TPM chip in the server.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            tunneled_kvm_state (str): By default, the tunneled vKVM property appears in Ready state. The property can be configured by performing allowed actions. Once the property is configured, it reverts to Ready state. * `Ready` - Tunneled vKVM is ready to be configured on the server. * `Enable` - Tunneled vKVM is enabled for the server. * `Disable` - Tunneled vKVM is disabled for the server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            locator_led (EquipmentLocatorLedRelationship): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            running_workflow (WorkflowWorkflowInfoRelationship): [optional]  # noqa: E501
            server (ComputePhysicalRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "compute.ServerSetting")
        object_type = kwargs.get('object_type', "compute.ServerSetting")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ComputeServerSettingAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "compute.ServerSetting", must be one of ["compute.ServerSetting", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "compute.ServerSetting", must be one of ["compute.ServerSetting", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_locator_led_state (str): User configured state of the locator LED for the server. * `None` - No operation property for locator led. * `On` - The Locator Led is turned on. * `Off` - The Locator Led is turned off.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            admin_power_state (str): User configured power state of the server. * `Policy` - Power state is set to the default value in the policy. * `PowerOn` - Power state of the server is set to On. * `PowerOff` - Power state is the server set to Off. * `PowerCycle` - Power state the server is reset. * `HardReset` - Power state the server is hard reset. * `Shutdown` - Operating system on the server is shut down. * `Reboot` - Power state of IMC is rebooted.. [optional] if omitted the server will use the default value of "Policy"  # noqa: E501
            certificates_action (CertificatemanagementCertificateBase): [optional]  # noqa: E501
            cmos_reset (str): The allowed actions on the CMOS Reset. * `Ready` - CMOS Reset operation is allowed to be done on the server in this state. * `Pending` - The identifier to state that the previous CMOS Reset operation on this server has not completed due to a pending power cycle. CMOS Reset operation cannot be done on the server when in this state. * `Reset` - The value that the UI/API needs to provide to trigger a CMOS Reset operation on a server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            config_state (str): The configured state of these settings in the target server. The value is any one of Applied, Applying, Failed. Applied - This state denotes that the settings are applied successfully in the target server. Applying - This state denotes that the settings are being applied in the target server. Failed - This state denotes that the settings could not be applied in the target server. * `Applied` - User configured settings are in applied state. * `Applying` - User settings are being applied on the target server. * `Scheduled` - User configured settings are scheduled to be applied. * `Failed` - User configured settings could not be applied.. [optional] if omitted the server will use the default value of "Applied"  # noqa: E501
            front_panel_lock_state (str): The allowed actions on the Front Panel Lock. * `Unlock` - Front Panel of the server is set to Unlocked state. * `Lock` - Front Panel of the server is set to Locked state.. [optional] if omitted the server will use the default value of "Unlock"  # noqa: E501
            kvm_reset (str): The allowed actions on the vKVM Reset. * `Ready` - Reset vKVM operation is allowed to be done on the server in this state. * `Reset` - The value that the UI/API needs to provide to trigger a Reset vKVM operation on a server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            name (str): The property used to identify the name of the server it is associated with.. [optional]  # noqa: E501
            one_time_boot_device (str): The name of the device chosen by user for configuring One-Time Boot device.. [optional]  # noqa: E501
            persistent_memory_operation (ComputePersistentMemoryOperation): [optional]  # noqa: E501
            server_config (ComputeServerConfig): [optional]  # noqa: E501
            server_op_status ([ComputeServerOpStatus], none_type): [optional]  # noqa: E501
            storage_controller_operation (ComputeStorageControllerOperation): [optional]  # noqa: E501
            storage_physical_drive_operation (ComputeStoragePhysicalDriveOperation): [optional]  # noqa: E501
            storage_virtual_drive_operation (ComputeStorageVirtualDriveOperation): [optional]  # noqa: E501
            tpm_reset (str): Clear the configuration of TPM chip in the server. * `None` - Perform no action on the TPM. * `ClearTpm` - Clear the configuration and restore factory defaults of TPM chip in the server.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            tunneled_kvm_state (str): By default, the tunneled vKVM property appears in Ready state. The property can be configured by performing allowed actions. Once the property is configured, it reverts to Ready state. * `Ready` - Tunneled vKVM is ready to be configured on the server. * `Enable` - Tunneled vKVM is enabled for the server. * `Disable` - Tunneled vKVM is disabled for the server.. [optional] if omitted the server will use the default value of "Ready"  # noqa: E501
            locator_led (EquipmentLocatorLedRelationship): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            running_workflow (WorkflowWorkflowInfoRelationship): [optional]  # noqa: E501
            server (ComputePhysicalRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "compute.ServerSetting")
        object_type = kwargs.get('object_type', "compute.ServerSetting")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
