"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-13892
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.workflow_base_data_type import WorkflowBaseDataType
    from intersight.model.workflow_catalog_relationship import WorkflowCatalogRelationship
    from intersight.model.workflow_parameter_set import WorkflowParameterSet
    from intersight.model.workflow_ui_input_filter import WorkflowUiInputFilter
    from intersight.model.workflow_validation_information import WorkflowValidationInformation
    from intersight.model.workflow_workflow_definition_relationship import WorkflowWorkflowDefinitionRelationship
    from intersight.model.workflow_workflow_metadata_relationship import WorkflowWorkflowMetadataRelationship
    from intersight.model.workflow_workflow_properties import WorkflowWorkflowProperties
    from intersight.model.workflow_workflow_task import WorkflowWorkflowTask
    globals()['WorkflowBaseDataType'] = WorkflowBaseDataType
    globals()['WorkflowCatalogRelationship'] = WorkflowCatalogRelationship
    globals()['WorkflowParameterSet'] = WorkflowParameterSet
    globals()['WorkflowUiInputFilter'] = WorkflowUiInputFilter
    globals()['WorkflowValidationInformation'] = WorkflowValidationInformation
    globals()['WorkflowWorkflowDefinitionRelationship'] = WorkflowWorkflowDefinitionRelationship
    globals()['WorkflowWorkflowMetadataRelationship'] = WorkflowWorkflowMetadataRelationship
    globals()['WorkflowWorkflowProperties'] = WorkflowWorkflowProperties
    globals()['WorkflowWorkflowTask'] = WorkflowWorkflowTask


class WorkflowWorkflowDefinitionAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'WORKFLOW.WORKFLOWDEFINITION': "workflow.WorkflowDefinition",
        },
        ('object_type',): {
            'WORKFLOW.WORKFLOWDEFINITION': "workflow.WorkflowDefinition",
        },
        ('license_entitlement',): {
            'BASE': "Base",
            'ESSENTIAL': "Essential",
            'STANDARD': "Standard",
            'ADVANTAGE': "Advantage",
            'PREMIER': "Premier",
            'IWO-ESSENTIAL': "IWO-Essential",
            'IWO-ADVANTAGE': "IWO-Advantage",
            'IWO-PREMIER': "IWO-Premier",
            'IKS-ADVANTAGE': "IKS-Advantage",
            'INC-PREMIER-1GFIXED': "INC-Premier-1GFixed",
            'INC-PREMIER-10GFIXED': "INC-Premier-10GFixed",
            'INC-PREMIER-100GFIXED': "INC-Premier-100GFixed",
            'INC-PREMIER-MOD4SLOT': "INC-Premier-Mod4Slot",
            'INC-PREMIER-MOD8SLOT': "INC-Premier-Mod8Slot",
            'INC-PREMIER-D2OPSFIXED': "INC-Premier-D2OpsFixed",
            'INC-PREMIER-D2OPSMOD': "INC-Premier-D2OpsMod",
            'INC-PREMIER-CENTRALIZEDMOD8SLOT': "INC-Premier-CentralizedMod8Slot",
            'INC-PREMIER-DISTRIBUTEDMOD8SLOT': "INC-Premier-DistributedMod8Slot",
            'INTERSIGHTTRIAL': "IntersightTrial",
            'IWOTRIAL': "IWOTrial",
            'IKSTRIAL': "IKSTrial",
            'INCTRIAL': "INCTrial",
        },
    }

    validations = {
        ('label',): {
            'regex': {
                'pattern': r'^[a-zA-Z0-9]{1}[\sa-zA-Z0-9_.\/:-]{0,91}$',  # noqa: E501
            },
        },
        ('name',): {
            'regex': {
                'pattern': r'^[a-zA-Z0-9]{1}[a-zA-Z0-9_.-]{0,63}$',  # noqa: E501
            },
        },
        ('version',): {
            'inclusive_minimum': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'default_version': (bool,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'input_definition': ([WorkflowBaseDataType], none_type,),  # noqa: E501
            'input_parameter_set': ([WorkflowParameterSet], none_type,),  # noqa: E501
            'label': (str,),  # noqa: E501
            'license_entitlement': (str,),  # noqa: E501
            'max_task_count': (int,),  # noqa: E501
            'max_worker_task_count': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'output_definition': ([WorkflowBaseDataType], none_type,),  # noqa: E501
            'output_parameters': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'properties': (WorkflowWorkflowProperties,),  # noqa: E501
            'tasks': ([WorkflowWorkflowTask], none_type,),  # noqa: E501
            'ui_input_filters': ([WorkflowUiInputFilter], none_type,),  # noqa: E501
            'ui_rendering_data': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'validation_information': (WorkflowValidationInformation,),  # noqa: E501
            'variable_definition': ([WorkflowBaseDataType], none_type,),  # noqa: E501
            'version': (int,),  # noqa: E501
            'catalog': (WorkflowCatalogRelationship,),  # noqa: E501
            'cloned_from': (WorkflowWorkflowDefinitionRelationship,),  # noqa: E501
            'workflow_metadata': (WorkflowWorkflowMetadataRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'default_version': 'DefaultVersion',  # noqa: E501
        'description': 'Description',  # noqa: E501
        'input_definition': 'InputDefinition',  # noqa: E501
        'input_parameter_set': 'InputParameterSet',  # noqa: E501
        'label': 'Label',  # noqa: E501
        'license_entitlement': 'LicenseEntitlement',  # noqa: E501
        'max_task_count': 'MaxTaskCount',  # noqa: E501
        'max_worker_task_count': 'MaxWorkerTaskCount',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'output_definition': 'OutputDefinition',  # noqa: E501
        'output_parameters': 'OutputParameters',  # noqa: E501
        'properties': 'Properties',  # noqa: E501
        'tasks': 'Tasks',  # noqa: E501
        'ui_input_filters': 'UiInputFilters',  # noqa: E501
        'ui_rendering_data': 'UiRenderingData',  # noqa: E501
        'validation_information': 'ValidationInformation',  # noqa: E501
        'variable_definition': 'VariableDefinition',  # noqa: E501
        'version': 'Version',  # noqa: E501
        'catalog': 'Catalog',  # noqa: E501
        'cloned_from': 'ClonedFrom',  # noqa: E501
        'workflow_metadata': 'WorkflowMetadata',  # noqa: E501
    }

    read_only_vars = {
        'license_entitlement',  # noqa: E501
        'max_task_count',  # noqa: E501
        'max_worker_task_count',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """WorkflowWorkflowDefinitionAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "workflow.WorkflowDefinition", must be one of ["workflow.WorkflowDefinition", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "workflow.WorkflowDefinition", must be one of ["workflow.WorkflowDefinition", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            default_version (bool): When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.. [optional]  # noqa: E501
            description (str): The description for this workflow.. [optional]  # noqa: E501
            input_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            input_parameter_set ([WorkflowParameterSet], none_type): [optional]  # noqa: E501
            label (str): A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).. [optional]  # noqa: E501
            license_entitlement (str): License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.. [optional] if omitted the server will use the default value of "Base"  # noqa: E501
            max_task_count (int): The maximum number of tasks that can be executed on this workflow.. [optional]  # noqa: E501
            max_worker_task_count (int): The maximum number of external (worker) tasks that can be executed on this workflow.. [optional]  # noqa: E501
            name (str): The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).. [optional]  # noqa: E501
            output_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            output_parameters (bool, date, datetime, dict, float, int, list, str, none_type): The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input | variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input, output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath> to extract specific fields on the data.. [optional]  # noqa: E501
            properties (WorkflowWorkflowProperties): [optional]  # noqa: E501
            tasks ([WorkflowWorkflowTask], none_type): [optional]  # noqa: E501
            ui_input_filters ([WorkflowUiInputFilter], none_type): [optional]  # noqa: E501
            ui_rendering_data (bool, date, datetime, dict, float, int, list, str, none_type): This will hold the data needed for workflow to be rendered in the user interface.. [optional]  # noqa: E501
            validation_information (WorkflowValidationInformation): [optional]  # noqa: E501
            variable_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            version (int): The version of the workflow to support multiple versions.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            catalog (WorkflowCatalogRelationship): [optional]  # noqa: E501
            cloned_from (WorkflowWorkflowDefinitionRelationship): [optional]  # noqa: E501
            workflow_metadata (WorkflowWorkflowMetadataRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "workflow.WorkflowDefinition")
        object_type = kwargs.get('object_type', "workflow.WorkflowDefinition")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """WorkflowWorkflowDefinitionAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "workflow.WorkflowDefinition", must be one of ["workflow.WorkflowDefinition", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "workflow.WorkflowDefinition", must be one of ["workflow.WorkflowDefinition", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            default_version (bool): When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.. [optional]  # noqa: E501
            description (str): The description for this workflow.. [optional]  # noqa: E501
            input_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            input_parameter_set ([WorkflowParameterSet], none_type): [optional]  # noqa: E501
            label (str): A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).. [optional]  # noqa: E501
            license_entitlement (str): License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.. [optional] if omitted the server will use the default value of "Base"  # noqa: E501
            max_task_count (int): The maximum number of tasks that can be executed on this workflow.. [optional]  # noqa: E501
            max_worker_task_count (int): The maximum number of external (worker) tasks that can be executed on this workflow.. [optional]  # noqa: E501
            name (str): The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).. [optional]  # noqa: E501
            output_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            output_parameters (bool, date, datetime, dict, float, int, list, str, none_type): The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input | variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input, output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath> to extract specific fields on the data.. [optional]  # noqa: E501
            properties (WorkflowWorkflowProperties): [optional]  # noqa: E501
            tasks ([WorkflowWorkflowTask], none_type): [optional]  # noqa: E501
            ui_input_filters ([WorkflowUiInputFilter], none_type): [optional]  # noqa: E501
            ui_rendering_data (bool, date, datetime, dict, float, int, list, str, none_type): This will hold the data needed for workflow to be rendered in the user interface.. [optional]  # noqa: E501
            validation_information (WorkflowValidationInformation): [optional]  # noqa: E501
            variable_definition ([WorkflowBaseDataType], none_type): [optional]  # noqa: E501
            version (int): The version of the workflow to support multiple versions.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            catalog (WorkflowCatalogRelationship): [optional]  # noqa: E501
            cloned_from (WorkflowWorkflowDefinitionRelationship): [optional]  # noqa: E501
            workflow_metadata (WorkflowWorkflowMetadataRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "workflow.WorkflowDefinition")
        object_type = kwargs.get('object_type', "workflow.WorkflowDefinition")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
