"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-2025091920
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    set_model_init_error,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.organization_organization_relationship import OrganizationOrganizationRelationship
    from intersight.model.resource_abstract_resource_qualification_policy_relationship import ResourceAbstractResourceQualificationPolicyRelationship
    from intersight.model.resource_resource_qualifier import ResourceResourceQualifier
    from intersight.model.resourcepool_pool_relationship import ResourcepoolPoolRelationship
    from intersight.model.scheduler_schedule_policy_relationship import SchedulerSchedulePolicyRelationship
    from intersight.model.scheduler_task_schedule_relationship import SchedulerTaskScheduleRelationship
    from intersight.model.workflow_validation_information import WorkflowValidationInformation
    from intersight.model.workload_blueprint_input_reference import WorkloadBlueprintInputReference
    from intersight.model.workload_definition_mapper import WorkloadDefinitionMapper
    from intersight.model.workload_deployment_change_detail import WorkloadDeploymentChangeDetail
    from intersight.model.workload_deployment_input_relationship import WorkloadDeploymentInputRelationship
    from intersight.model.workload_rollout_strategy import WorkloadRolloutStrategy
    from intersight.model.workload_state_aggregation import WorkloadStateAggregation
    from intersight.model.workload_workload_definition_relationship import WorkloadWorkloadDefinitionRelationship
    globals()['OrganizationOrganizationRelationship'] = OrganizationOrganizationRelationship
    globals()['ResourceAbstractResourceQualificationPolicyRelationship'] = ResourceAbstractResourceQualificationPolicyRelationship
    globals()['ResourceResourceQualifier'] = ResourceResourceQualifier
    globals()['ResourcepoolPoolRelationship'] = ResourcepoolPoolRelationship
    globals()['SchedulerSchedulePolicyRelationship'] = SchedulerSchedulePolicyRelationship
    globals()['SchedulerTaskScheduleRelationship'] = SchedulerTaskScheduleRelationship
    globals()['WorkflowValidationInformation'] = WorkflowValidationInformation
    globals()['WorkloadBlueprintInputReference'] = WorkloadBlueprintInputReference
    globals()['WorkloadDefinitionMapper'] = WorkloadDefinitionMapper
    globals()['WorkloadDeploymentChangeDetail'] = WorkloadDeploymentChangeDetail
    globals()['WorkloadDeploymentInputRelationship'] = WorkloadDeploymentInputRelationship
    globals()['WorkloadRolloutStrategy'] = WorkloadRolloutStrategy
    globals()['WorkloadStateAggregation'] = WorkloadStateAggregation
    globals()['WorkloadWorkloadDefinitionRelationship'] = WorkloadWorkloadDefinitionRelationship


class WorkloadWorkloadDeploymentAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'WORKLOAD.WORKLOADDEPLOYMENT': "workload.WorkloadDeployment",
        },
        ('object_type',): {
            'WORKLOAD.WORKLOADDEPLOYMENT': "workload.WorkloadDeployment",
        },
        ('action',): {
            'NONE': "None",
            'PREPARETODEPLOY': "PrepareToDeploy",
            'DEPLOY': "Deploy",
            'SUSPEND': "Suspend",
            'RETRY': "Retry",
            'RESUME': "Resume",
        },
        ('conformance',): {
            'OK': "Ok",
            'NONCONFORMANT': "NonConformant",
        },
        ('last_action',): {
            'NONE': "None",
            'PREPARETODEPLOY': "PrepareToDeploy",
            'DEPLOY': "Deploy",
            'SUSPEND': "Suspend",
            'RETRY': "Retry",
            'RESUME': "Resume",
        },
        ('status',): {
            'DRAFT': "Draft",
            'READYTODEPLOY': "ReadyToDeploy",
            'INPROGRESS': "InProgress",
            'OK': "Ok",
            'FAILED': "Failed",
            'CHANGESSCHEDULED': "ChangesScheduled",
            'SUSPENDED': "Suspended",
        },
    }

    validations = {
        ('description',): {
            'max_length': 1024,
            'regex': {
                'pattern': r'^$|^[a-zA-Z0-9]+[\x00-\xFF]*$',  # noqa: E501
            },
        },
        ('digit_count',): {
            'inclusive_maximum': 4,
            'inclusive_minimum': 1,
        },
        ('name',): {
            'regex': {
                'pattern': r'^[a-zA-Z0-9][a-zA-Z0-9- _]{0,31}$',  # noqa: E501
            },
        },
        ('ref_name',): {
            'regex': {
                'pattern': r'^$|^[a-zA-Z0-9][a-zA-Z0-9_]{0,31}$',  # noqa: E501
            },
        },
        ('workload_instance_prefix',): {
            'regex': {
                'pattern': r'^[a-zA-Z0-9][a-zA-Z0-9-_]{0,31}$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'action': (str,),  # noqa: E501
            'blueprints': ([WorkloadBlueprintInputReference], none_type,),  # noqa: E501
            'change_details': ([WorkloadDeploymentChangeDetail], none_type,),  # noqa: E501
            'conformance': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'digit_count': (int,),  # noqa: E501
            'instance_conformance_summary': ([WorkloadStateAggregation], none_type,),  # noqa: E501
            'instance_status_summary': ([WorkloadStateAggregation], none_type,),  # noqa: E501
            'last_action': (str,),  # noqa: E501
            'last_instance_index': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'qualifiers': ([ResourceResourceQualifier], none_type,),  # noqa: E501
            'ref_name': (str,),  # noqa: E501
            'rollout_strategy': (WorkloadRolloutStrategy,),  # noqa: E501
            'start_index_for_suffix': (int,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'validation_information': (WorkflowValidationInformation,),  # noqa: E501
            'workload_definition_reference': (WorkloadDefinitionMapper,),  # noqa: E501
            'workload_instance_prefix': (str,),  # noqa: E501
            'deployment_input': (WorkloadDeploymentInputRelationship,),  # noqa: E501
            'deployment_input_history': ([WorkloadDeploymentInputRelationship], none_type,),  # noqa: E501
            'organization': (OrganizationOrganizationRelationship,),  # noqa: E501
            'qualification_policies': ([ResourceAbstractResourceQualificationPolicyRelationship], none_type,),  # noqa: E501
            'resource_pool': (ResourcepoolPoolRelationship,),  # noqa: E501
            'schedule_policy': (SchedulerSchedulePolicyRelationship,),  # noqa: E501
            'task_schedule': (SchedulerTaskScheduleRelationship,),  # noqa: E501
            'workload_definition': (WorkloadWorkloadDefinitionRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'action': 'Action',  # noqa: E501
        'blueprints': 'Blueprints',  # noqa: E501
        'change_details': 'ChangeDetails',  # noqa: E501
        'conformance': 'Conformance',  # noqa: E501
        'description': 'Description',  # noqa: E501
        'digit_count': 'DigitCount',  # noqa: E501
        'instance_conformance_summary': 'InstanceConformanceSummary',  # noqa: E501
        'instance_status_summary': 'InstanceStatusSummary',  # noqa: E501
        'last_action': 'LastAction',  # noqa: E501
        'last_instance_index': 'LastInstanceIndex',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'qualifiers': 'Qualifiers',  # noqa: E501
        'ref_name': 'RefName',  # noqa: E501
        'rollout_strategy': 'RolloutStrategy',  # noqa: E501
        'start_index_for_suffix': 'StartIndexForSuffix',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'validation_information': 'ValidationInformation',  # noqa: E501
        'workload_definition_reference': 'WorkloadDefinitionReference',  # noqa: E501
        'workload_instance_prefix': 'WorkloadInstancePrefix',  # noqa: E501
        'deployment_input': 'DeploymentInput',  # noqa: E501
        'deployment_input_history': 'DeploymentInputHistory',  # noqa: E501
        'organization': 'Organization',  # noqa: E501
        'qualification_policies': 'QualificationPolicies',  # noqa: E501
        'resource_pool': 'ResourcePool',  # noqa: E501
        'schedule_policy': 'SchedulePolicy',  # noqa: E501
        'task_schedule': 'TaskSchedule',  # noqa: E501
        'workload_definition': 'WorkloadDefinition',  # noqa: E501
    }

    read_only_vars = {
        'conformance',  # noqa: E501
        'last_action',  # noqa: E501
        'last_instance_index',  # noqa: E501
        'ref_name',  # noqa: E501
        'status',  # noqa: E501
        'deployment_input_history',  # noqa: E501
        'qualification_policies',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """WorkloadWorkloadDeploymentAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "workload.WorkloadDeployment", must be one of ["workload.WorkloadDeployment", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "workload.WorkloadDeployment", must be one of ["workload.WorkloadDeployment", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): The action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            blueprints ([WorkloadBlueprintInputReference], none_type): [optional]  # noqa: E501
            change_details ([WorkloadDeploymentChangeDetail], none_type): [optional]  # noqa: E501
            conformance (str): The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.. [optional] if omitted the server will use the default value of "Ok"  # noqa: E501
            description (str): A brief description of the deployment.. [optional]  # noqa: E501
            digit_count (int): The minimum digit count to format the instance index with leading zeros,  for example if the digit count is 4 and the start index is 1, then the  first instance will have a suffix 0001. If the number of instances created for the deployment exceeds the 9999, then the suffix will become a 5 digit number.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            instance_conformance_summary ([WorkloadStateAggregation], none_type): [optional]  # noqa: E501
            instance_status_summary ([WorkloadStateAggregation], none_type): [optional]  # noqa: E501
            last_action (str): The last action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            last_instance_index (int): Tracks the last numeric index used for workload instances. The next instance index is derived by incrementing this value.. [optional]  # noqa: E501
            name (str): The name for this Deployment. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). The name must be unique within the organization.. [optional]  # noqa: E501
            qualifiers ([ResourceResourceQualifier], none_type): [optional]  # noqa: E501
            ref_name (str): A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).. [optional]  # noqa: E501
            rollout_strategy (WorkloadRolloutStrategy): [optional]  # noqa: E501
            start_index_for_suffix (int): The starting index used to generate the suffix for the workload instance name.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            status (str): The status of the deployment. * `Draft` - The initial state of the deployment, indicating it is still being configured and not ready for deployment. * `ReadyToDeploy` - The deployment has passed validation checks and is ready to be deployed to instances. * `InProgress` - The initial deployment or changes in the deployment are in progress. * `Ok` - All associated instances have been successfully deployed. * `Failed` - One or more instances failed during initial deployment or changes in the deployment operations. * `ChangesScheduled` - The deployment has changes that need to be pushed to all associated instances. * `Suspended` - The deployment is suspended, preventing any further initial deployments or changes to deployment operations.. [optional] if omitted the server will use the default value of "Draft"  # noqa: E501
            validation_information (WorkflowValidationInformation): [optional]  # noqa: E501
            workload_definition_reference (WorkloadDefinitionMapper): [optional]  # noqa: E501
            workload_instance_prefix (str): The prefix to be used for naming workload instances created by this deployment. Prefix can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), or an underscore (_). This prefix must be unique within the organization.. [optional]  # noqa: E501
            deployment_input (WorkloadDeploymentInputRelationship): [optional]  # noqa: E501
            deployment_input_history ([WorkloadDeploymentInputRelationship], none_type): An array of relationships to workloadDeploymentInput resources.. [optional]  # noqa: E501
            organization (OrganizationOrganizationRelationship): [optional]  # noqa: E501
            qualification_policies ([ResourceAbstractResourceQualificationPolicyRelationship], none_type): An array of relationships to resourceAbstractResourceQualificationPolicy resources.. [optional]  # noqa: E501
            resource_pool (ResourcepoolPoolRelationship): [optional]  # noqa: E501
            schedule_policy (SchedulerSchedulePolicyRelationship): [optional]  # noqa: E501
            task_schedule (SchedulerTaskScheduleRelationship): [optional]  # noqa: E501
            workload_definition (WorkloadWorkloadDefinitionRelationship): [optional]  # noqa: E501
        """

        class_id = "workload.WorkloadDeployment" if len(kwargs.get('class_id','').strip()) == 0 else kwargs.get('class_id', "workload.WorkloadDeployment")
        object_type = "workload.WorkloadDeployment" if len(kwargs.get('object_type','').strip()) == 0 else kwargs.get('object_type', "workload.WorkloadDeployment")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """WorkloadWorkloadDeploymentAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "workload.WorkloadDeployment", must be one of ["workload.WorkloadDeployment", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "workload.WorkloadDeployment", must be one of ["workload.WorkloadDeployment", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): The action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            blueprints ([WorkloadBlueprintInputReference], none_type): [optional]  # noqa: E501
            change_details ([WorkloadDeploymentChangeDetail], none_type): [optional]  # noqa: E501
            conformance (str): The conformance status of the deployment. * `Ok` - The deployment conforms to the preferred version of the workload. * `NonConformant` - The deployment does not conform to the preferred version of the workload.. [optional] if omitted the server will use the default value of "Ok"  # noqa: E501
            description (str): A brief description of the deployment.. [optional]  # noqa: E501
            digit_count (int): The minimum digit count to format the instance index with leading zeros,  for example if the digit count is 4 and the start index is 1, then the  first instance will have a suffix 0001. If the number of instances created for the deployment exceeds the 9999, then the suffix will become a 5 digit number.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            instance_conformance_summary ([WorkloadStateAggregation], none_type): [optional]  # noqa: E501
            instance_status_summary ([WorkloadStateAggregation], none_type): [optional]  # noqa: E501
            last_action (str): The last action is performed on the deployment. * `None` - No changes have been made. * `PrepareToDeploy` - Marks the deployment as ready once the user has completed all changes and the deployment is in a valid state. Once the deployment is marked as PrepareToDeploy, workload instances will be created, but the actual deployment will occur as part of the deploy action. * `Deploy` - Initiates the process of pushing workload configuration to the instances based on the configured schedule. Once deployed, the deployment cannot be reverted to draft status. * `Suspend` - Suspends the deployment, preventing any further actions until it is resumed. Making changes to deployment configuration will not be pushed out. The deployment will not take any changes from the attached Workload when it is suspended. * `Retry` - Retries the deployment for all instances that previously failed. * `Resume` - Resumes a suspended deployment. Any changes made to the deployment when it was suspended or any changes made to the attached Workload will now be pushed out based on configured schedules.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            last_instance_index (int): Tracks the last numeric index used for workload instances. The next instance index is derived by incrementing this value.. [optional]  # noqa: E501
            name (str): The name for this Deployment. Name can only contain letters (a-z, A-Z), numbers (0-9), space, hyphen (-), or an underscore (_). The name must be unique within the organization.. [optional]  # noqa: E501
            qualifiers ([ResourceResourceQualifier], none_type): [optional]  # noqa: E501
            ref_name (str): A reference name is generated by the system based on the given name by replacing spaces and hyphen in name with underscore. This reference name is used internally and cannot be edited by users. It may only contain letters (a–z, A–Z), numbers (0–9), and underscores (_).. [optional]  # noqa: E501
            rollout_strategy (WorkloadRolloutStrategy): [optional]  # noqa: E501
            start_index_for_suffix (int): The starting index used to generate the suffix for the workload instance name.. [optional] if omitted the server will use the default value of 1  # noqa: E501
            status (str): The status of the deployment. * `Draft` - The initial state of the deployment, indicating it is still being configured and not ready for deployment. * `ReadyToDeploy` - The deployment has passed validation checks and is ready to be deployed to instances. * `InProgress` - The initial deployment or changes in the deployment are in progress. * `Ok` - All associated instances have been successfully deployed. * `Failed` - One or more instances failed during initial deployment or changes in the deployment operations. * `ChangesScheduled` - The deployment has changes that need to be pushed to all associated instances. * `Suspended` - The deployment is suspended, preventing any further initial deployments or changes to deployment operations.. [optional] if omitted the server will use the default value of "Draft"  # noqa: E501
            validation_information (WorkflowValidationInformation): [optional]  # noqa: E501
            workload_definition_reference (WorkloadDefinitionMapper): [optional]  # noqa: E501
            workload_instance_prefix (str): The prefix to be used for naming workload instances created by this deployment. Prefix can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), or an underscore (_). This prefix must be unique within the organization.. [optional]  # noqa: E501
            deployment_input (WorkloadDeploymentInputRelationship): [optional]  # noqa: E501
            deployment_input_history ([WorkloadDeploymentInputRelationship], none_type): An array of relationships to workloadDeploymentInput resources.. [optional]  # noqa: E501
            organization (OrganizationOrganizationRelationship): [optional]  # noqa: E501
            qualification_policies ([ResourceAbstractResourceQualificationPolicyRelationship], none_type): An array of relationships to resourceAbstractResourceQualificationPolicy resources.. [optional]  # noqa: E501
            resource_pool (ResourcepoolPoolRelationship): [optional]  # noqa: E501
            schedule_policy (SchedulerSchedulePolicyRelationship): [optional]  # noqa: E501
            task_schedule (SchedulerTaskScheduleRelationship): [optional]  # noqa: E501
            workload_definition (WorkloadWorkloadDefinitionRelationship): [optional]  # noqa: E501
        """

        class_id = "workload.WorkloadDeployment" if len(kwargs.get('class_id','').strip()) == 0 else kwargs.get('class_id', "workload.WorkloadDeployment")
        object_type = "workload.WorkloadDeployment" if len(kwargs.get('object_type','').strip()) == 0 else kwargs.get('object_type', "workload.WorkloadDeployment")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name in self.read_only_vars:
                set_model_init_error(f"Warning : {var_name} is omitted from request payload as it is a read-only property")
                continue
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
