"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-13892
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from intersight.model.display_names import DisplayNames
    from intersight.model.mo_base_mo_relationship import MoBaseMoRelationship
    from intersight.model.mo_tag import MoTag
    from intersight.model.mo_version_context import MoVersionContext
    from intersight.model.storage_base_capacity import StorageBaseCapacity
    from intersight.model.storage_base_volume import StorageBaseVolume
    from intersight.model.storage_hitachi_array_relationship import StorageHitachiArrayRelationship
    from intersight.model.storage_hitachi_parity_group_relationship import StorageHitachiParityGroupRelationship
    from intersight.model.storage_hitachi_pool_relationship import StorageHitachiPoolRelationship
    from intersight.model.storage_hitachi_volume_all_of import StorageHitachiVolumeAllOf
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['DisplayNames'] = DisplayNames
    globals()['MoBaseMoRelationship'] = MoBaseMoRelationship
    globals()['MoTag'] = MoTag
    globals()['MoVersionContext'] = MoVersionContext
    globals()['StorageBaseCapacity'] = StorageBaseCapacity
    globals()['StorageBaseVolume'] = StorageBaseVolume
    globals()['StorageHitachiArrayRelationship'] = StorageHitachiArrayRelationship
    globals()['StorageHitachiParityGroupRelationship'] = StorageHitachiParityGroupRelationship
    globals()['StorageHitachiPoolRelationship'] = StorageHitachiPoolRelationship
    globals()['StorageHitachiVolumeAllOf'] = StorageHitachiVolumeAllOf


class StorageHitachiVolume(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'STORAGE.HITACHIVOLUME': "storage.HitachiVolume",
        },
        ('object_type',): {
            'STORAGE.HITACHIVOLUME': "storage.HitachiVolume",
        },
        ('data_reduction_mode',): {
            'N/A': "N/A",
            'COMPRESSION': "Compression",
            'COMPRESSION_DEDUPLICATION': "Compression Deduplication",
            'DISABLED': "Disabled",
        },
        ('data_reduction_status',): {
            'N/A': "N/A",
            'ENABLED': "Enabled",
            'DISABLED': "Disabled",
            'ENABLING': "Enabling",
            'REHYDRATING': "Rehydrating",
            'DELETING': "Deleting",
            'FAILED': "Failed",
        },
        ('emulation_type',): {
            'N/A': "N/A",
            'NOT_DEFINED': "NOT DEFINED",
            'DEFINING': "DEFINING",
            'REMOVING': "REMOVING",
            'OPEN-V': "OPEN-V",
        },
        ('raid_level',): {
            'N/A': "N/A",
            'RAID1': "RAID1",
            'RAID5': "RAID5",
            'RAID6': "RAID6",
        },
        ('status',): {
            'N/A': "N/A",
            'NML': "NML",
            'BLK': "BLK",
            'BSY': "BSY",
            'UNKNOWN': "Unknown",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'attributes': ([str], none_type,),  # noqa: E501
            'clpr_id': (int,),  # noqa: E501
            'data_reduction_mode': (str,),  # noqa: E501
            'data_reduction_status': (str,),  # noqa: E501
            'drive_type': (str,),  # noqa: E501
            'emulation_type': (str,),  # noqa: E501
            'is_full_allocation_enabled': (bool,),  # noqa: E501
            'label': (str,),  # noqa: E501
            'namespace_id': (str,),  # noqa: E501
            'num_of_paths': (int,),  # noqa: E501
            'nvm_subsystem_id': (str,),  # noqa: E501
            'parity_group_ids': ([str], none_type,),  # noqa: E501
            'pool_id': (str,),  # noqa: E501
            'raid_level': (str,),  # noqa: E501
            'raid_type': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'array': (StorageHitachiArrayRelationship,),  # noqa: E501
            'parity_groups': ([StorageHitachiParityGroupRelationship], none_type,),  # noqa: E501
            'pool': (StorageHitachiPoolRelationship,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
            'account_moid': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'domain_group_moid': (str,),  # noqa: E501
            'mod_time': (datetime,),  # noqa: E501
            'moid': (str,),  # noqa: E501
            'owners': ([str], none_type,),  # noqa: E501
            'shared_scope': (str,),  # noqa: E501
            'tags': ([MoTag], none_type,),  # noqa: E501
            'version_context': (MoVersionContext,),  # noqa: E501
            'ancestors': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'parent': (MoBaseMoRelationship,),  # noqa: E501
            'permission_resources': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'display_names': (DisplayNames,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'naa_id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'size': (int,),  # noqa: E501
            'storage_utilization': (StorageBaseCapacity,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        val = {
        }
        if not val:
            return None
        return {'class_id': val}

    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'attributes': 'Attributes',  # noqa: E501
        'clpr_id': 'ClprId',  # noqa: E501
        'data_reduction_mode': 'DataReductionMode',  # noqa: E501
        'data_reduction_status': 'DataReductionStatus',  # noqa: E501
        'drive_type': 'DriveType',  # noqa: E501
        'emulation_type': 'EmulationType',  # noqa: E501
        'is_full_allocation_enabled': 'IsFullAllocationEnabled',  # noqa: E501
        'label': 'Label',  # noqa: E501
        'namespace_id': 'NamespaceId',  # noqa: E501
        'num_of_paths': 'NumOfPaths',  # noqa: E501
        'nvm_subsystem_id': 'NvmSubsystemId',  # noqa: E501
        'parity_group_ids': 'ParityGroupIds',  # noqa: E501
        'pool_id': 'PoolId',  # noqa: E501
        'raid_level': 'RaidLevel',  # noqa: E501
        'raid_type': 'RaidType',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'array': 'Array',  # noqa: E501
        'parity_groups': 'ParityGroups',  # noqa: E501
        'pool': 'Pool',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
        'account_moid': 'AccountMoid',  # noqa: E501
        'create_time': 'CreateTime',  # noqa: E501
        'domain_group_moid': 'DomainGroupMoid',  # noqa: E501
        'mod_time': 'ModTime',  # noqa: E501
        'moid': 'Moid',  # noqa: E501
        'owners': 'Owners',  # noqa: E501
        'shared_scope': 'SharedScope',  # noqa: E501
        'tags': 'Tags',  # noqa: E501
        'version_context': 'VersionContext',  # noqa: E501
        'ancestors': 'Ancestors',  # noqa: E501
        'parent': 'Parent',  # noqa: E501
        'permission_resources': 'PermissionResources',  # noqa: E501
        'display_names': 'DisplayNames',  # noqa: E501
        'description': 'Description',  # noqa: E501
        'naa_id': 'NaaId',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'size': 'Size',  # noqa: E501
        'storage_utilization': 'StorageUtilization',  # noqa: E501
    }

    read_only_vars = {
        'clpr_id',  # noqa: E501
        'data_reduction_mode',  # noqa: E501
        'data_reduction_status',  # noqa: E501
        'drive_type',  # noqa: E501
        'emulation_type',  # noqa: E501
        'is_full_allocation_enabled',  # noqa: E501
        'label',  # noqa: E501
        'namespace_id',  # noqa: E501
        'num_of_paths',  # noqa: E501
        'nvm_subsystem_id',  # noqa: E501
        'pool_id',  # noqa: E501
        'raid_level',  # noqa: E501
        'raid_type',  # noqa: E501
        'status',  # noqa: E501
        'parity_groups',  # noqa: E501
        'account_moid',  # noqa: E501
        'create_time',  # noqa: E501
        'domain_group_moid',  # noqa: E501
        'mod_time',  # noqa: E501
        'shared_scope',  # noqa: E501
        'ancestors',  # noqa: E501
        'permission_resources',  # noqa: E501
        'description',  # noqa: E501
        'naa_id',  # noqa: E501
        'name',  # noqa: E501
        'size',  # noqa: E501
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """StorageHitachiVolume - a model defined in OpenAPI

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "storage.HitachiVolume", must be one of ["storage.HitachiVolume", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "storage.HitachiVolume", must be one of ["storage.HitachiVolume", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            attributes ([str], none_type): [optional]  # noqa: E501
            clpr_id (int): CLPR (Cache Logical Partition) number of this volume.. [optional]  # noqa: E501
            data_reduction_mode (str): Setting of the capacity saving function (dedupe and compression). * `N/A` - The capacity saving function is not available. * `Compression` - The capacity saving function (compression) is enabled. * `Compression Deduplication` - The capacity saving function (compression and deduplication) is enabled. * `Disabled` - The capacity saving function (compression and deduplication) is disabled.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            data_reduction_status (str): Status of the capacity saving function. * `N/A` - The capacity saving function is not available. * `Enabled` - The capacity saving function is enabled. * `Disabled` - The capacity saving function is disabled. * `Enabling` - The capacity saving function is being enabled. * `Rehydrating` - The capacity saving function is being disabled. * `Deleting` - The volumes for which the capacity saving function is enabled are being deleted. * `Failed` - An attempt to enable the capacity saving function failed.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            drive_type (str): Code indicating the drive type of the drive belonging to the volume.. [optional]  # noqa: E501
            emulation_type (str): The volume emulation type or the volume status information. * `N/A` - The emulation type is not available. * `NOT DEFINED` - The volume is not implemented. * `DEFINING` - The volume is being created. * `REMOVING` - The volume is being removed. * `OPEN-V` - To be provided by Hitachi.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            is_full_allocation_enabled (bool): Whether pages are reserved by the FullAllocation functionality.. [optional]  # noqa: E501
            label (str): Label of the volume, as configured in the storage array.. [optional]  # noqa: E501
            namespace_id (str): Namespace ID registered in NVM Subsystem.. [optional]  # noqa: E501
            num_of_paths (int): Number of paths set for the volume.. [optional]  # noqa: E501
            nvm_subsystem_id (str): NVM subsystem ID on storage system.. [optional]  # noqa: E501
            parity_group_ids ([str], none_type): [optional]  # noqa: E501
            pool_id (str): ID of the pool with which the volume is associated.. [optional]  # noqa: E501
            raid_level (str): RAID level for the volume. * `N/A` - RAID level is unknown or multiple RAID levels are being used. * `RAID1` - RAID level of the given drives is RAID1. * `RAID5` - RAID level of the given drives is RAID5. * `RAID6` - RAID level of the given drives is RAID6.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            raid_type (str): RAID type drive configuration.. [optional]  # noqa: E501
            status (str): Status information of the volume. * `N/A` - The volume status is not available. * `NML` - The volume is in normal status. * `BLK` - The volume is in blocked state. * `BSY` - The volume status is being changed. * `Unknown` - The volume status is unknown (not supported).. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            array (StorageHitachiArrayRelationship): [optional]  # noqa: E501
            parity_groups ([StorageHitachiParityGroupRelationship], none_type): An array of relationships to storageHitachiParityGroup resources.. [optional]  # noqa: E501
            pool (StorageHitachiPoolRelationship): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str], none_type): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag], none_type): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
            description (str): Short description about the volume.. [optional]  # noqa: E501
            naa_id (str): NAA id of volume. It is a significant number to identify corresponding lun path in hypervisor.. [optional]  # noqa: E501
            name (str): Named entity of the volume.. [optional]  # noqa: E501
            size (int): User provisioned volume size. It is the size exposed to host.. [optional]  # noqa: E501
            storage_utilization (StorageBaseCapacity): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "storage.HitachiVolume")
        object_type = kwargs.get('object_type', "storage.HitachiVolume")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """StorageHitachiVolume - a model defined in OpenAPI

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "storage.HitachiVolume", must be one of ["storage.HitachiVolume", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "storage.HitachiVolume", must be one of ["storage.HitachiVolume", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            attributes ([str], none_type): [optional]  # noqa: E501
            clpr_id (int): CLPR (Cache Logical Partition) number of this volume.. [optional]  # noqa: E501
            data_reduction_mode (str): Setting of the capacity saving function (dedupe and compression). * `N/A` - The capacity saving function is not available. * `Compression` - The capacity saving function (compression) is enabled. * `Compression Deduplication` - The capacity saving function (compression and deduplication) is enabled. * `Disabled` - The capacity saving function (compression and deduplication) is disabled.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            data_reduction_status (str): Status of the capacity saving function. * `N/A` - The capacity saving function is not available. * `Enabled` - The capacity saving function is enabled. * `Disabled` - The capacity saving function is disabled. * `Enabling` - The capacity saving function is being enabled. * `Rehydrating` - The capacity saving function is being disabled. * `Deleting` - The volumes for which the capacity saving function is enabled are being deleted. * `Failed` - An attempt to enable the capacity saving function failed.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            drive_type (str): Code indicating the drive type of the drive belonging to the volume.. [optional]  # noqa: E501
            emulation_type (str): The volume emulation type or the volume status information. * `N/A` - The emulation type is not available. * `NOT DEFINED` - The volume is not implemented. * `DEFINING` - The volume is being created. * `REMOVING` - The volume is being removed. * `OPEN-V` - To be provided by Hitachi.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            is_full_allocation_enabled (bool): Whether pages are reserved by the FullAllocation functionality.. [optional]  # noqa: E501
            label (str): Label of the volume, as configured in the storage array.. [optional]  # noqa: E501
            namespace_id (str): Namespace ID registered in NVM Subsystem.. [optional]  # noqa: E501
            num_of_paths (int): Number of paths set for the volume.. [optional]  # noqa: E501
            nvm_subsystem_id (str): NVM subsystem ID on storage system.. [optional]  # noqa: E501
            parity_group_ids ([str], none_type): [optional]  # noqa: E501
            pool_id (str): ID of the pool with which the volume is associated.. [optional]  # noqa: E501
            raid_level (str): RAID level for the volume. * `N/A` - RAID level is unknown or multiple RAID levels are being used. * `RAID1` - RAID level of the given drives is RAID1. * `RAID5` - RAID level of the given drives is RAID5. * `RAID6` - RAID level of the given drives is RAID6.. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            raid_type (str): RAID type drive configuration.. [optional]  # noqa: E501
            status (str): Status information of the volume. * `N/A` - The volume status is not available. * `NML` - The volume is in normal status. * `BLK` - The volume is in blocked state. * `BSY` - The volume status is being changed. * `Unknown` - The volume status is unknown (not supported).. [optional] if omitted the server will use the default value of "N/A"  # noqa: E501
            array (StorageHitachiArrayRelationship): [optional]  # noqa: E501
            parity_groups ([StorageHitachiParityGroupRelationship], none_type): An array of relationships to storageHitachiParityGroup resources.. [optional]  # noqa: E501
            pool (StorageHitachiPoolRelationship): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str], none_type): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag], none_type): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
            description (str): Short description about the volume.. [optional]  # noqa: E501
            naa_id (str): NAA id of volume. It is a significant number to identify corresponding lun path in hypervisor.. [optional]  # noqa: E501
            name (str): Named entity of the volume.. [optional]  # noqa: E501
            size (int): User provisioned volume size. It is the size exposed to host.. [optional]  # noqa: E501
            storage_utilization (StorageBaseCapacity): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "storage.HitachiVolume")
        object_type = kwargs.get('object_type', "storage.HitachiVolume")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              StorageBaseVolume,
              StorageHitachiVolumeAllOf,
          ],
          'oneOf': [
          ],
        }
