"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-2024112619
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    set_model_init_error,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from intersight.model.hci_alarm_summary import HciAlarmSummary
    from intersight.model.hci_backplane_network_params import HciBackplaneNetworkParams
    from intersight.model.hci_compliance_relationship import HciComplianceRelationship
    from intersight.model.hci_domain_manager_relationship import HciDomainManagerRelationship
    from intersight.model.hci_entitlement_relationship import HciEntitlementRelationship
    from intersight.model.hci_fault_tolerance_state import HciFaultToleranceState
    from intersight.model.hci_ip_address import HciIpAddress
    from intersight.model.hci_ip_address_or_fqdn import HciIpAddressOrFqdn
    from intersight.model.hci_management_server import HciManagementServer
    from intersight.model.hci_node_relationship import HciNodeRelationship
    from intersight.model.hci_pulse_status import HciPulseStatus
    from intersight.model.hci_software_type import HciSoftwareType
    from intersight.model.hci_violation_relationship import HciViolationRelationship
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['HciAlarmSummary'] = HciAlarmSummary
    globals()['HciBackplaneNetworkParams'] = HciBackplaneNetworkParams
    globals()['HciComplianceRelationship'] = HciComplianceRelationship
    globals()['HciDomainManagerRelationship'] = HciDomainManagerRelationship
    globals()['HciEntitlementRelationship'] = HciEntitlementRelationship
    globals()['HciFaultToleranceState'] = HciFaultToleranceState
    globals()['HciIpAddress'] = HciIpAddress
    globals()['HciIpAddressOrFqdn'] = HciIpAddressOrFqdn
    globals()['HciManagementServer'] = HciManagementServer
    globals()['HciNodeRelationship'] = HciNodeRelationship
    globals()['HciPulseStatus'] = HciPulseStatus
    globals()['HciSoftwareType'] = HciSoftwareType
    globals()['HciViolationRelationship'] = HciViolationRelationship


class HciClusterAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'HCI.CLUSTER': "hci.Cluster",
        },
        ('object_type',): {
            'HCI.CLUSTER': "hci.Cluster",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'alarm_summary': (HciAlarmSummary,),  # noqa: E501
            'backplane': (HciBackplaneNetworkParams,),  # noqa: E501
            'build_info_build_type': (str,),  # noqa: E501
            'build_info_commit_id': (str,),  # noqa: E501
            'build_info_full_version': (str,),  # noqa: E501
            'build_info_short_commit_id': (str,),  # noqa: E501
            'build_info_version': (str,),  # noqa: E501
            'cluster_arch': (str,),  # noqa: E501
            'cluster_ext_id': (str,),  # noqa: E501
            'cluster_function': ([str], none_type,),  # noqa: E501
            'cluster_software_map': ([HciSoftwareType], none_type,),  # noqa: E501
            'container_name': (str,),  # noqa: E501
            'cpu_capacity_hz': (int,),  # noqa: E501
            'cpu_usage_hz': (int,),  # noqa: E501
            'encryption_in_transit_status': (bool,),  # noqa: E501
            'encryption_scope': ([str], none_type,),  # noqa: E501
            'external_address': (HciIpAddress,),  # noqa: E501
            'external_data_service_ip': (HciIpAddress,),  # noqa: E501
            'external_subnet': (str,),  # noqa: E501
            'fault_tolerance_state': (HciFaultToleranceState,),  # noqa: E501
            'hypervisor_types': ([str], none_type,),  # noqa: E501
            'incarnationid': (str,),  # noqa: E501
            'inefficient_vm_count': (int,),  # noqa: E501
            'internal_subnet': (str,),  # noqa: E501
            'is_lts': (bool,),  # noqa: E501
            'key_management_server_type': (str,),  # noqa: E501
            'management_server': (HciManagementServer,),  # noqa: E501
            'masquerading_ip': (HciIpAddress,),  # noqa: E501
            'masquerading_port': (int,),  # noqa: E501
            'memory_capacity_bytes': (int,),  # noqa: E501
            'memory_usage_bytes': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'name_server_ip_list': ([HciIpAddressOrFqdn], none_type,),  # noqa: E501
            'ntp_server_ip_list': ([HciIpAddressOrFqdn], none_type,),  # noqa: E501
            'number_of_nodes': (int,),  # noqa: E501
            'operation_mode': (str,),  # noqa: E501
            'password_remote_login_enabled': (bool,),  # noqa: E501
            'pc_ext_id': (str,),  # noqa: E501
            'pulse_status': (HciPulseStatus,),  # noqa: E501
            'redundancy_factor': (int,),  # noqa: E501
            'remote_support': (bool,),  # noqa: E501
            'storage_capacity_bytes': (int,),  # noqa: E501
            'storage_usage_bytes': (int,),  # noqa: E501
            'timezone': (str,),  # noqa: E501
            'upgrade_status': (str,),  # noqa: E501
            'vm_count': (int,),  # noqa: E501
            'compliance': (HciComplianceRelationship,),  # noqa: E501
            'domain_manager': (HciDomainManagerRelationship,),  # noqa: E501
            'entitlement': (HciEntitlementRelationship,),  # noqa: E501
            'nodes': ([HciNodeRelationship], none_type,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
            'violation': (HciViolationRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'alarm_summary': 'AlarmSummary',  # noqa: E501
        'backplane': 'Backplane',  # noqa: E501
        'build_info_build_type': 'BuildInfoBuildType',  # noqa: E501
        'build_info_commit_id': 'BuildInfoCommitId',  # noqa: E501
        'build_info_full_version': 'BuildInfoFullVersion',  # noqa: E501
        'build_info_short_commit_id': 'BuildInfoShortCommitId',  # noqa: E501
        'build_info_version': 'BuildInfoVersion',  # noqa: E501
        'cluster_arch': 'ClusterArch',  # noqa: E501
        'cluster_ext_id': 'ClusterExtId',  # noqa: E501
        'cluster_function': 'ClusterFunction',  # noqa: E501
        'cluster_software_map': 'ClusterSoftwareMap',  # noqa: E501
        'container_name': 'ContainerName',  # noqa: E501
        'cpu_capacity_hz': 'CpuCapacityHz',  # noqa: E501
        'cpu_usage_hz': 'CpuUsageHz',  # noqa: E501
        'encryption_in_transit_status': 'EncryptionInTransitStatus',  # noqa: E501
        'encryption_scope': 'EncryptionScope',  # noqa: E501
        'external_address': 'ExternalAddress',  # noqa: E501
        'external_data_service_ip': 'ExternalDataServiceIp',  # noqa: E501
        'external_subnet': 'ExternalSubnet',  # noqa: E501
        'fault_tolerance_state': 'FaultToleranceState',  # noqa: E501
        'hypervisor_types': 'HypervisorTypes',  # noqa: E501
        'incarnationid': 'Incarnationid',  # noqa: E501
        'inefficient_vm_count': 'InefficientVmCount',  # noqa: E501
        'internal_subnet': 'InternalSubnet',  # noqa: E501
        'is_lts': 'IsLts',  # noqa: E501
        'key_management_server_type': 'KeyManagementServerType',  # noqa: E501
        'management_server': 'ManagementServer',  # noqa: E501
        'masquerading_ip': 'MasqueradingIp',  # noqa: E501
        'masquerading_port': 'MasqueradingPort',  # noqa: E501
        'memory_capacity_bytes': 'MemoryCapacityBytes',  # noqa: E501
        'memory_usage_bytes': 'MemoryUsageBytes',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'name_server_ip_list': 'NameServerIpList',  # noqa: E501
        'ntp_server_ip_list': 'NtpServerIpList',  # noqa: E501
        'number_of_nodes': 'NumberOfNodes',  # noqa: E501
        'operation_mode': 'OperationMode',  # noqa: E501
        'password_remote_login_enabled': 'PasswordRemoteLoginEnabled',  # noqa: E501
        'pc_ext_id': 'PcExtId',  # noqa: E501
        'pulse_status': 'PulseStatus',  # noqa: E501
        'redundancy_factor': 'RedundancyFactor',  # noqa: E501
        'remote_support': 'RemoteSupport',  # noqa: E501
        'storage_capacity_bytes': 'StorageCapacityBytes',  # noqa: E501
        'storage_usage_bytes': 'StorageUsageBytes',  # noqa: E501
        'timezone': 'Timezone',  # noqa: E501
        'upgrade_status': 'UpgradeStatus',  # noqa: E501
        'vm_count': 'VmCount',  # noqa: E501
        'compliance': 'Compliance',  # noqa: E501
        'domain_manager': 'DomainManager',  # noqa: E501
        'entitlement': 'Entitlement',  # noqa: E501
        'nodes': 'Nodes',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
        'violation': 'Violation',  # noqa: E501
    }

    read_only_vars = {
        'build_info_build_type',  # noqa: E501
        'build_info_commit_id',  # noqa: E501
        'build_info_full_version',  # noqa: E501
        'build_info_short_commit_id',  # noqa: E501
        'build_info_version',  # noqa: E501
        'cluster_arch',  # noqa: E501
        'cluster_ext_id',  # noqa: E501
        'container_name',  # noqa: E501
        'cpu_capacity_hz',  # noqa: E501
        'cpu_usage_hz',  # noqa: E501
        'encryption_in_transit_status',  # noqa: E501
        'external_subnet',  # noqa: E501
        'incarnationid',  # noqa: E501
        'inefficient_vm_count',  # noqa: E501
        'internal_subnet',  # noqa: E501
        'is_lts',  # noqa: E501
        'key_management_server_type',  # noqa: E501
        'masquerading_port',  # noqa: E501
        'memory_capacity_bytes',  # noqa: E501
        'memory_usage_bytes',  # noqa: E501
        'name',  # noqa: E501
        'number_of_nodes',  # noqa: E501
        'operation_mode',  # noqa: E501
        'password_remote_login_enabled',  # noqa: E501
        'pc_ext_id',  # noqa: E501
        'redundancy_factor',  # noqa: E501
        'remote_support',  # noqa: E501
        'storage_capacity_bytes',  # noqa: E501
        'storage_usage_bytes',  # noqa: E501
        'timezone',  # noqa: E501
        'upgrade_status',  # noqa: E501
        'vm_count',  # noqa: E501
        'nodes',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """HciClusterAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "hci.Cluster", must be one of ["hci.Cluster", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "hci.Cluster", must be one of ["hci.Cluster", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            alarm_summary (HciAlarmSummary): [optional]  # noqa: E501
            backplane (HciBackplaneNetworkParams): [optional]  # noqa: E501
            build_info_build_type (str): The software build type, such as \"release\" or \"debug\" build.. [optional]  # noqa: E501
            build_info_commit_id (str): The software commit id for this build image.. [optional]  # noqa: E501
            build_info_full_version (str): The longer form of software version. It usually includes the commit id.. [optional]  # noqa: E501
            build_info_short_commit_id (str): The short version of the software commit id for this build image.. [optional]  # noqa: E501
            build_info_version (str): The software version from the build.. [optional]  # noqa: E501
            cluster_arch (str): The CPU architecture of the cluster server such as x86_64 and PPC64LE.. [optional]  # noqa: E501
            cluster_ext_id (str): The unique identifier of the cluster.. [optional]  # noqa: E501
            cluster_function ([str], none_type): [optional]  # noqa: E501
            cluster_software_map ([HciSoftwareType], none_type): [optional]  # noqa: E501
            container_name (str): The name of the default container created as part of cluster creation.. [optional]  # noqa: E501
            cpu_capacity_hz (int): The CPU capacity in Hz of the cluster.. [optional]  # noqa: E501
            cpu_usage_hz (int): The CPU usage in Hz of the cluster.. [optional]  # noqa: E501
            encryption_in_transit_status (bool): Indicate if encryption-in-transit is enabled or not.. [optional]  # noqa: E501
            encryption_scope ([str], none_type): [optional]  # noqa: E501
            external_address (HciIpAddress): [optional]  # noqa: E501
            external_data_service_ip (HciIpAddress): [optional]  # noqa: E501
            external_subnet (str): The external subnet of the cluster.. [optional]  # noqa: E501
            fault_tolerance_state (HciFaultToleranceState): [optional]  # noqa: E501
            hypervisor_types ([str], none_type): [optional]  # noqa: E501
            incarnationid (str): Cluster incarnation Id, part of payload for cluster update operation only.. [optional]  # noqa: E501
            inefficient_vm_count (int): The number of inefficient VMs in this cluster.. [optional]  # noqa: E501
            internal_subnet (str): The internal subnet of the cluster.. [optional]  # noqa: E501
            is_lts (bool): The LTS status indicates whether the release is categorized as Long-term or not.. [optional]  # noqa: E501
            key_management_server_type (str): The key management server type of the cluster.. [optional]  # noqa: E501
            management_server (HciManagementServer): [optional]  # noqa: E501
            masquerading_ip (HciIpAddress): [optional]  # noqa: E501
            masquerading_port (int): The masquerading port of the cluster.. [optional]  # noqa: E501
            memory_capacity_bytes (int): The memory capacity in bytes of the cluster.. [optional]  # noqa: E501
            memory_usage_bytes (int): The memory usage in bytes of the cluster.. [optional]  # noqa: E501
            name (str): The name of the reported cluster.. [optional]  # noqa: E501
            name_server_ip_list ([HciIpAddressOrFqdn], none_type): [optional]  # noqa: E501
            ntp_server_ip_list ([HciIpAddressOrFqdn], none_type): [optional]  # noqa: E501
            number_of_nodes (int): The number of nodes in the cluster.. [optional]  # noqa: E501
            operation_mode (str): The operation mode of the cluster such as NORMAL, READ_ONLY, STAND_ALONE, SWITCH_TO_TWO_NODE, OVERRIDE.. [optional]  # noqa: E501
            password_remote_login_enabled (bool): Indicates whether the password ssh into the cluster is enabled or not.. [optional]  # noqa: E501
            pc_ext_id (str): The unique identifier of the domain manager (Prism Central) instance which manages this cluster.. [optional]  # noqa: E501
            pulse_status (HciPulseStatus): [optional]  # noqa: E501
            redundancy_factor (int): The redundancy factor of the cluster.. [optional]  # noqa: E501
            remote_support (bool): The remote support status of the cluster.. [optional]  # noqa: E501
            storage_capacity_bytes (int): The storage capacity in bytes of the cluster.. [optional]  # noqa: E501
            storage_usage_bytes (int): The storage usage in bytes of the cluster.. [optional]  # noqa: E501
            timezone (str): The timezone of the cluster.. [optional]  # noqa: E501
            upgrade_status (str): The upgrade status of a cluster includes the following known values: PENDING, DOWNLOADING, QUEUED, PREUPGRADE, UPGRADING, SUCCEEDED, FAILED, CANCELLED, and SCHEDULED.The upgrade status of a cluster.. [optional]  # noqa: E501
            vm_count (int): The number of VMs running on this cluster.. [optional]  # noqa: E501
            compliance (HciComplianceRelationship): [optional]  # noqa: E501
            domain_manager (HciDomainManagerRelationship): [optional]  # noqa: E501
            entitlement (HciEntitlementRelationship): [optional]  # noqa: E501
            nodes ([HciNodeRelationship], none_type): An array of relationships to hciNode resources.. [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            violation (HciViolationRelationship): [optional]  # noqa: E501
        """

        class_id = "hci.Cluster" if len(kwargs.get('class_id','').strip()) == 0 else kwargs.get('class_id', "hci.Cluster")
        object_type = "hci.Cluster" if len(kwargs.get('object_type','').strip()) == 0 else kwargs.get('object_type', "hci.Cluster")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """HciClusterAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "hci.Cluster", must be one of ["hci.Cluster", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "hci.Cluster", must be one of ["hci.Cluster", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            alarm_summary (HciAlarmSummary): [optional]  # noqa: E501
            backplane (HciBackplaneNetworkParams): [optional]  # noqa: E501
            build_info_build_type (str): The software build type, such as \"release\" or \"debug\" build.. [optional]  # noqa: E501
            build_info_commit_id (str): The software commit id for this build image.. [optional]  # noqa: E501
            build_info_full_version (str): The longer form of software version. It usually includes the commit id.. [optional]  # noqa: E501
            build_info_short_commit_id (str): The short version of the software commit id for this build image.. [optional]  # noqa: E501
            build_info_version (str): The software version from the build.. [optional]  # noqa: E501
            cluster_arch (str): The CPU architecture of the cluster server such as x86_64 and PPC64LE.. [optional]  # noqa: E501
            cluster_ext_id (str): The unique identifier of the cluster.. [optional]  # noqa: E501
            cluster_function ([str], none_type): [optional]  # noqa: E501
            cluster_software_map ([HciSoftwareType], none_type): [optional]  # noqa: E501
            container_name (str): The name of the default container created as part of cluster creation.. [optional]  # noqa: E501
            cpu_capacity_hz (int): The CPU capacity in Hz of the cluster.. [optional]  # noqa: E501
            cpu_usage_hz (int): The CPU usage in Hz of the cluster.. [optional]  # noqa: E501
            encryption_in_transit_status (bool): Indicate if encryption-in-transit is enabled or not.. [optional]  # noqa: E501
            encryption_scope ([str], none_type): [optional]  # noqa: E501
            external_address (HciIpAddress): [optional]  # noqa: E501
            external_data_service_ip (HciIpAddress): [optional]  # noqa: E501
            external_subnet (str): The external subnet of the cluster.. [optional]  # noqa: E501
            fault_tolerance_state (HciFaultToleranceState): [optional]  # noqa: E501
            hypervisor_types ([str], none_type): [optional]  # noqa: E501
            incarnationid (str): Cluster incarnation Id, part of payload for cluster update operation only.. [optional]  # noqa: E501
            inefficient_vm_count (int): The number of inefficient VMs in this cluster.. [optional]  # noqa: E501
            internal_subnet (str): The internal subnet of the cluster.. [optional]  # noqa: E501
            is_lts (bool): The LTS status indicates whether the release is categorized as Long-term or not.. [optional]  # noqa: E501
            key_management_server_type (str): The key management server type of the cluster.. [optional]  # noqa: E501
            management_server (HciManagementServer): [optional]  # noqa: E501
            masquerading_ip (HciIpAddress): [optional]  # noqa: E501
            masquerading_port (int): The masquerading port of the cluster.. [optional]  # noqa: E501
            memory_capacity_bytes (int): The memory capacity in bytes of the cluster.. [optional]  # noqa: E501
            memory_usage_bytes (int): The memory usage in bytes of the cluster.. [optional]  # noqa: E501
            name (str): The name of the reported cluster.. [optional]  # noqa: E501
            name_server_ip_list ([HciIpAddressOrFqdn], none_type): [optional]  # noqa: E501
            ntp_server_ip_list ([HciIpAddressOrFqdn], none_type): [optional]  # noqa: E501
            number_of_nodes (int): The number of nodes in the cluster.. [optional]  # noqa: E501
            operation_mode (str): The operation mode of the cluster such as NORMAL, READ_ONLY, STAND_ALONE, SWITCH_TO_TWO_NODE, OVERRIDE.. [optional]  # noqa: E501
            password_remote_login_enabled (bool): Indicates whether the password ssh into the cluster is enabled or not.. [optional]  # noqa: E501
            pc_ext_id (str): The unique identifier of the domain manager (Prism Central) instance which manages this cluster.. [optional]  # noqa: E501
            pulse_status (HciPulseStatus): [optional]  # noqa: E501
            redundancy_factor (int): The redundancy factor of the cluster.. [optional]  # noqa: E501
            remote_support (bool): The remote support status of the cluster.. [optional]  # noqa: E501
            storage_capacity_bytes (int): The storage capacity in bytes of the cluster.. [optional]  # noqa: E501
            storage_usage_bytes (int): The storage usage in bytes of the cluster.. [optional]  # noqa: E501
            timezone (str): The timezone of the cluster.. [optional]  # noqa: E501
            upgrade_status (str): The upgrade status of a cluster includes the following known values: PENDING, DOWNLOADING, QUEUED, PREUPGRADE, UPGRADING, SUCCEEDED, FAILED, CANCELLED, and SCHEDULED.The upgrade status of a cluster.. [optional]  # noqa: E501
            vm_count (int): The number of VMs running on this cluster.. [optional]  # noqa: E501
            compliance (HciComplianceRelationship): [optional]  # noqa: E501
            domain_manager (HciDomainManagerRelationship): [optional]  # noqa: E501
            entitlement (HciEntitlementRelationship): [optional]  # noqa: E501
            nodes ([HciNodeRelationship], none_type): An array of relationships to hciNode resources.. [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            violation (HciViolationRelationship): [optional]  # noqa: E501
        """

        class_id = "hci.Cluster" if len(kwargs.get('class_id','').strip()) == 0 else kwargs.get('class_id', "hci.Cluster")
        object_type = "hci.Cluster" if len(kwargs.get('object_type','').strip()) == 0 else kwargs.get('object_type', "hci.Cluster")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name in self.read_only_vars:
                set_model_init_error(f"Warning : {var_name} is omitted from request payload as it is a read-only property")
                continue
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
