"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-9661
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.license_account_license_data_relationship import LicenseAccountLicenseDataRelationship
    from intersight.model.license_substitute_license import LicenseSubstituteLicense
    globals()['LicenseAccountLicenseDataRelationship'] = LicenseAccountLicenseDataRelationship
    globals()['LicenseSubstituteLicense'] = LicenseSubstituteLicense


class LicenseLicenseInfoAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'LICENSE.LICENSEINFO': "license.LicenseInfo",
        },
        ('object_type',): {
            'LICENSE.LICENSEINFO': "license.LicenseInfo",
        },
        ('license_state',): {
            'NOTLICENSED': "NotLicensed",
            'GRACEEXPIRED': "GraceExpired",
            'TRIALPERIOD': "TrialPeriod",
            'OUTOFCOMPLIANCE': "OutOfCompliance",
            'COMPLIANCE': "Compliance",
            'TRIALEXPIRED': "TrialExpired",
        },
        ('license_type',): {
            'BASE': "Base",
            'ESSENTIAL': "Essential",
            'STANDARD': "Standard",
            'ADVANTAGE': "Advantage",
            'PREMIER': "Premier",
            'IWO-ESSENTIAL': "IWO-Essential",
            'IWO-ADVANTAGE': "IWO-Advantage",
            'IWO-PREMIER': "IWO-Premier",
            'IKS-ADVANTAGE': "IKS-Advantage",
            'INC-PREMIER-1GFIXED': "INC-Premier-1GFixed",
            'INC-PREMIER-10GFIXED': "INC-Premier-10GFixed",
            'INC-PREMIER-100GFIXED': "INC-Premier-100GFixed",
            'INC-PREMIER-MOD4SLOT': "INC-Premier-Mod4Slot",
            'INC-PREMIER-MOD8SLOT': "INC-Premier-Mod8Slot",
            'INC-PREMIER-D2OPSFIXED': "INC-Premier-D2OpsFixed",
            'INC-PREMIER-D2OPSMOD': "INC-Premier-D2OpsMod",
            'INTERSIGHTTRIAL': "IntersightTrial",
            'IWOTRIAL': "IWOTrial",
            'IKSTRIAL': "IKSTrial",
            'INCTRIAL': "INCTrial",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'active_admin': (bool,),  # noqa: E501
            'balance': (int,),  # noqa: E501
            'days_left': (int,),  # noqa: E501
            'end_time': (datetime,),  # noqa: E501
            'enforce_mode': (str,),  # noqa: E501
            'error_desc': (str,),  # noqa: E501
            'evaluation_period': (int,),  # noqa: E501
            'expire_time': (datetime,),  # noqa: E501
            'extra_evaluation': (int,),  # noqa: E501
            'license_count': (int,),  # noqa: E501
            'license_count_purchased': (int,),  # noqa: E501
            'license_state': (str,),  # noqa: E501
            'license_type': (str,),  # noqa: E501
            'net_substitution': (int,),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'subscription_id': (str,),  # noqa: E501
            'substituted_license': ([LicenseSubstituteLicense], none_type,),  # noqa: E501
            'trial_admin': (bool,),  # noqa: E501
            'account_license_data': (LicenseAccountLicenseDataRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'active_admin': 'ActiveAdmin',  # noqa: E501
        'balance': 'Balance',  # noqa: E501
        'days_left': 'DaysLeft',  # noqa: E501
        'end_time': 'EndTime',  # noqa: E501
        'enforce_mode': 'EnforceMode',  # noqa: E501
        'error_desc': 'ErrorDesc',  # noqa: E501
        'evaluation_period': 'EvaluationPeriod',  # noqa: E501
        'expire_time': 'ExpireTime',  # noqa: E501
        'extra_evaluation': 'ExtraEvaluation',  # noqa: E501
        'license_count': 'LicenseCount',  # noqa: E501
        'license_count_purchased': 'LicenseCountPurchased',  # noqa: E501
        'license_state': 'LicenseState',  # noqa: E501
        'license_type': 'LicenseType',  # noqa: E501
        'net_substitution': 'NetSubstitution',  # noqa: E501
        'start_time': 'StartTime',  # noqa: E501
        'subscription_id': 'SubscriptionId',  # noqa: E501
        'substituted_license': 'SubstitutedLicense',  # noqa: E501
        'trial_admin': 'TrialAdmin',  # noqa: E501
        'account_license_data': 'AccountLicenseData',  # noqa: E501
    }

    read_only_vars = {
        'active_admin',  # noqa: E501
        'balance',  # noqa: E501
        'days_left',  # noqa: E501
        'end_time',  # noqa: E501
        'enforce_mode',  # noqa: E501
        'error_desc',  # noqa: E501
        'expire_time',  # noqa: E501
        'license_count',  # noqa: E501
        'license_count_purchased',  # noqa: E501
        'license_state',  # noqa: E501
        'license_type',  # noqa: E501
        'net_substitution',  # noqa: E501
        'start_time',  # noqa: E501
        'subscription_id',  # noqa: E501
        'trial_admin',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """LicenseLicenseInfoAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "license.LicenseInfo", must be one of ["license.LicenseInfo", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "license.LicenseInfo", must be one of ["license.LicenseInfo", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active_admin (bool): The license administrative state. Set this property to 'true' to activate the license entitlements.. [optional]  # noqa: E501
            balance (int): The total balance we have for licenses.. [optional]  # noqa: E501
            days_left (int): The number of days left for licenseState to stay in TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            end_time (datetime): The date and time when the trial period expires. The value of the 'endTime' property is set when the account enters the TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            enforce_mode (str): The entitlement mode reported by Cisco Smart Software Manager.. [optional]  # noqa: E501
            error_desc (str): The detailed error message when there is any error related to this licensing entitlement.. [optional]  # noqa: E501
            evaluation_period (int): The default Trial or Grace period customer is entitled to.. [optional]  # noqa: E501
            expire_time (datetime): The date and time when the next expiration time of license subscription.. [optional]  # noqa: E501
            extra_evaluation (int): The number of days the trial Trial or Grace period is extended. The trial or grace period can be extended once.. [optional]  # noqa: E501
            license_count (int): The total number of license consumed in the Intersight account.. [optional]  # noqa: E501
            license_count_purchased (int): The total number of license purchased from cisco.. [optional]  # noqa: E501
            license_state (str): The license state defined by Intersight. The value may be one of NotLicensed, TrialPeriod, OutOfCompliance, Compliance, GraceExpired, or TrialExpired. * `NotLicensed` - The license token is neither activated nor registered. * `GraceExpired` - The license grace period has expired. * `TrialPeriod` - The 90 days of trial period. * `OutOfCompliance` - The license is out of compliance. * `Compliance` - The license is in compliance. * `TrialExpired` - The trial period of 90 days has expired.. [optional] if omitted the server will use the default value of "NotLicensed"  # noqa: E501
            license_type (str): The name of the Intersight license entitlement. For example, this property may be set to 'Essential'. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.. [optional] if omitted the server will use the default value of "Base"  # noqa: E501
            net_substitution (int): The total number of substituted licenses added or removed.. [optional]  # noqa: E501
            start_time (datetime): The date and time when the licenseState entered the TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            subscription_id (str): The id of license subscription.. [optional]  # noqa: E501
            substituted_license ([LicenseSubstituteLicense], none_type): [optional]  # noqa: E501
            trial_admin (bool): The administrative state of the trial license. When the LicenseState is set to 'NotLicensed', 'trialAdmin' can be set to true to start the trial period, i.e. licenseState is set to be TrialPeriod.. [optional]  # noqa: E501
            account_license_data (LicenseAccountLicenseDataRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "license.LicenseInfo")
        object_type = kwargs.get('object_type', "license.LicenseInfo")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """LicenseLicenseInfoAllOf - a model defined in OpenAPI

        Args:

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "license.LicenseInfo", must be one of ["license.LicenseInfo", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "license.LicenseInfo", must be one of ["license.LicenseInfo", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active_admin (bool): The license administrative state. Set this property to 'true' to activate the license entitlements.. [optional]  # noqa: E501
            balance (int): The total balance we have for licenses.. [optional]  # noqa: E501
            days_left (int): The number of days left for licenseState to stay in TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            end_time (datetime): The date and time when the trial period expires. The value of the 'endTime' property is set when the account enters the TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            enforce_mode (str): The entitlement mode reported by Cisco Smart Software Manager.. [optional]  # noqa: E501
            error_desc (str): The detailed error message when there is any error related to this licensing entitlement.. [optional]  # noqa: E501
            evaluation_period (int): The default Trial or Grace period customer is entitled to.. [optional]  # noqa: E501
            expire_time (datetime): The date and time when the next expiration time of license subscription.. [optional]  # noqa: E501
            extra_evaluation (int): The number of days the trial Trial or Grace period is extended. The trial or grace period can be extended once.. [optional]  # noqa: E501
            license_count (int): The total number of license consumed in the Intersight account.. [optional]  # noqa: E501
            license_count_purchased (int): The total number of license purchased from cisco.. [optional]  # noqa: E501
            license_state (str): The license state defined by Intersight. The value may be one of NotLicensed, TrialPeriod, OutOfCompliance, Compliance, GraceExpired, or TrialExpired. * `NotLicensed` - The license token is neither activated nor registered. * `GraceExpired` - The license grace period has expired. * `TrialPeriod` - The 90 days of trial period. * `OutOfCompliance` - The license is out of compliance. * `Compliance` - The license is in compliance. * `TrialExpired` - The trial period of 90 days has expired.. [optional] if omitted the server will use the default value of "NotLicensed"  # noqa: E501
            license_type (str): The name of the Intersight license entitlement. For example, this property may be set to 'Essential'. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license tier for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of trial mode Nexus tiers.. [optional] if omitted the server will use the default value of "Base"  # noqa: E501
            net_substitution (int): The total number of substituted licenses added or removed.. [optional]  # noqa: E501
            start_time (datetime): The date and time when the licenseState entered the TrialPeriod or OutOfCompliance state.. [optional]  # noqa: E501
            subscription_id (str): The id of license subscription.. [optional]  # noqa: E501
            substituted_license ([LicenseSubstituteLicense], none_type): [optional]  # noqa: E501
            trial_admin (bool): The administrative state of the trial license. When the LicenseState is set to 'NotLicensed', 'trialAdmin' can be set to true to start the trial period, i.e. licenseState is set to be TrialPeriod.. [optional]  # noqa: E501
            account_license_data (LicenseAccountLicenseDataRelationship): [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "license.LicenseInfo")
        object_type = kwargs.get('object_type', "license.LicenseInfo")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.class_id = class_id
        self.object_type = object_type
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
