"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-2024112619
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    set_model_init_error,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.telemetry_druid_expression_virtual_column import TelemetryDruidExpressionVirtualColumn
    from intersight.model.telemetry_druid_list_filtered_virtual_column import TelemetryDruidListFilteredVirtualColumn
    from intersight.model.telemetry_nested_field_virtual_column import TelemetryNestedFieldVirtualColumn
    from intersight.model.telemetry_nested_field_virtual_column_all_of_path_parts import TelemetryNestedFieldVirtualColumnAllOfPathParts
    globals()['TelemetryDruidExpressionVirtualColumn'] = TelemetryDruidExpressionVirtualColumn
    globals()['TelemetryDruidListFilteredVirtualColumn'] = TelemetryDruidListFilteredVirtualColumn
    globals()['TelemetryNestedFieldVirtualColumn'] = TelemetryNestedFieldVirtualColumn
    globals()['TelemetryNestedFieldVirtualColumnAllOfPathParts'] = TelemetryNestedFieldVirtualColumnAllOfPathParts


class TelemetryDruidVirtualColumn(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'EXPRESSION': "expression",
            'NESTED-FIELD': "nested-field",
            'MV-FILTERED': "mv-filtered",
        },
        ('output_type',): {
            'LONG': "LONG",
            'FLOAT': "FLOAT",
            'DOUBLE': "DOUBLE",
            'STRING': "STRING",
            'ARRAY': "ARRAY",
            'COMPLEX': "COMPLEX",
        },
        ('expected_type',): {
            'LONG': "LONG",
            'FLOAT': "FLOAT",
            'DOUBLE': "DOUBLE",
            'STRING': "STRING",
            'COMPLEX': "COMPLEX",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'type': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'expression': (str,),  # noqa: E501
            'output_type': (str,),  # noqa: E501
            'column_name': (str,),  # noqa: E501
            'output_name': (str,),  # noqa: E501
            'expected_type': (str,),  # noqa: E501
            'path_parts': ([TelemetryNestedFieldVirtualColumnAllOfPathParts],),  # noqa: E501
            'process_from_raw': (bool,),  # noqa: E501
            'path': (str,),  # noqa: E501
            'use_jq_syntax': (bool,),  # noqa: E501
            'delegate': (str,),  # noqa: E501
            'values': ([str],),  # noqa: E501
            'is_allow_list': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'expression': TelemetryDruidExpressionVirtualColumn,
            'mv-filtered': TelemetryDruidListFilteredVirtualColumn,
            'nested-field': TelemetryNestedFieldVirtualColumn,
            'telemetry.DruidExpressionVirtualColumn': TelemetryDruidExpressionVirtualColumn,
            'telemetry.DruidListFilteredVirtualColumn': TelemetryDruidListFilteredVirtualColumn,
            'telemetry.NestedFieldVirtualColumn': TelemetryNestedFieldVirtualColumn,
        }
        if not val:
            return None
        return {'type': val}

    attribute_map = {
        'type': 'type',  # noqa: E501
        'name': 'name',  # noqa: E501
        'expression': 'expression',  # noqa: E501
        'output_type': 'outputType',  # noqa: E501
        'column_name': 'columnName',  # noqa: E501
        'output_name': 'outputName',  # noqa: E501
        'expected_type': 'expectedType',  # noqa: E501
        'path_parts': 'pathParts',  # noqa: E501
        'process_from_raw': 'processFromRaw',  # noqa: E501
        'path': 'path',  # noqa: E501
        'use_jq_syntax': 'useJqSyntax',  # noqa: E501
        'delegate': 'delegate',  # noqa: E501
        'values': 'values',  # noqa: E501
        'is_allow_list': 'isAllowList',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, type, *args, **kwargs):  # noqa: E501
        """TelemetryDruidVirtualColumn - a model defined in OpenAPI

        Keyword Args:
            type (str): The virtual-column type.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): name of the virtual column.. [optional]  # noqa: E501
            expression (str): The Druid expression.. [optional]  # noqa: E501
            output_type (str): Type of the resulting column.. [optional] if omitted the server will use the default value of "FLOAT"  # noqa: E501
            column_name (str): Name of the COMPLEX<json> input column.. [optional]  # noqa: E501
            output_name (str): Name of the virtual column.. [optional]  # noqa: E501
            expected_type (str): Native druid output type of the column. Druid will coerce output to this type if it does not match the underlying type.. [optional] if omitted the server will use the default value of "STRING"  # noqa: E501
            path_parts ([TelemetryNestedFieldVirtualColumnAllOfPathParts]): A list of path parts that represent the path to the desired value in the json column. Each path part can be a string or an integer. If a path part is an integer, it is treated as an index into an array.. [optional]  # noqa: E501
            process_from_raw (bool): If set to true, the virtual column will process the \"raw\" JSON data to extract values rather than using an optimized \"literal\" value selector. This option allows extracting non-literal values from JSON the cost of much slower performance.. [optional] if omitted the server will use the default value of False  # noqa: E501
            path (str): A JSONPath or jq syntax string representation of the path to the desired value in the json column. This field is optional and can be used instead of pathParts.. [optional]  # noqa: E501
            use_jq_syntax (bool): If set to true, the virtual column will use jq syntax instead of JSONPath.. [optional] if omitted the server will use the default value of False  # noqa: E501
            delegate (str): Name of the multi-value string input column to filter.. [optional]  # noqa: E501
            values ([str]): Set of string value to allow or deny.. [optional]  # noqa: E501
            is_allow_list (bool): If set to true, the virtual column will allow only the values in the list. If set to false, the virtual column will provide all values except those specified.. [optional] if omitted the server will use the default value of True  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'type': type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]
        composed_keys = set()
        for instance in self._composed_instances:
            composed_keys.update(set(instance.attribute_map.values()))

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            if var_name in composed_keys:
                continue
            setattr(self, var_name, var_value)

        return self


    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, type, *args, **kwargs):  # noqa: E501
        """TelemetryDruidVirtualColumn - a model defined in OpenAPI

        Keyword Args:
            type (str): The virtual-column type.
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): name of the virtual column.. [optional]  # noqa: E501
            expression (str): The Druid expression.. [optional]  # noqa: E501
            output_type (str): Type of the resulting column.. [optional] if omitted the server will use the default value of "FLOAT"  # noqa: E501
            column_name (str): Name of the COMPLEX<json> input column.. [optional]  # noqa: E501
            output_name (str): Name of the virtual column.. [optional]  # noqa: E501
            expected_type (str): Native druid output type of the column. Druid will coerce output to this type if it does not match the underlying type.. [optional] if omitted the server will use the default value of "STRING"  # noqa: E501
            path_parts ([TelemetryNestedFieldVirtualColumnAllOfPathParts]): A list of path parts that represent the path to the desired value in the json column. Each path part can be a string or an integer. If a path part is an integer, it is treated as an index into an array.. [optional]  # noqa: E501
            process_from_raw (bool): If set to true, the virtual column will process the \"raw\" JSON data to extract values rather than using an optimized \"literal\" value selector. This option allows extracting non-literal values from JSON the cost of much slower performance.. [optional] if omitted the server will use the default value of False  # noqa: E501
            path (str): A JSONPath or jq syntax string representation of the path to the desired value in the json column. This field is optional and can be used instead of pathParts.. [optional]  # noqa: E501
            use_jq_syntax (bool): If set to true, the virtual column will use jq syntax instead of JSONPath.. [optional] if omitted the server will use the default value of False  # noqa: E501
            delegate (str): Name of the multi-value string input column to filter.. [optional]  # noqa: E501
            values ([str]): Set of string value to allow or deny.. [optional]  # noqa: E501
            is_allow_list (bool): If set to true, the virtual column will allow only the values in the list. If set to false, the virtual column will provide all values except those specified.. [optional] if omitted the server will use the default value of True  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'type': type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in self.read_only_vars:
                set_model_init_error(f"Warning : {var_name} is omitted from request payload as it is a read-only property")
                continue
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              TelemetryDruidExpressionVirtualColumn,
              TelemetryDruidListFilteredVirtualColumn,
              TelemetryNestedFieldVirtualColumn,
          ],
        }
