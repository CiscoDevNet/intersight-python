"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document.  # noqa: E501

    The version of the OpenAPI document: 1.0.11-13892
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from intersight.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from intersight.exceptions import ApiAttributeError


def lazy_import():
    from intersight.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from intersight.model.compute_physical_summary_relationship import ComputePhysicalSummaryRelationship
    from intersight.model.display_names import DisplayNames
    from intersight.model.hyperflex_node_relationship import HyperflexNodeRelationship
    from intersight.model.infra_hardware_info import InfraHardwareInfo
    from intersight.model.mo_base_mo_relationship import MoBaseMoRelationship
    from intersight.model.mo_tag import MoTag
    from intersight.model.mo_version_context import MoVersionContext
    from intersight.model.virtualization_base_host import VirtualizationBaseHost
    from intersight.model.virtualization_compute_capacity import VirtualizationComputeCapacity
    from intersight.model.virtualization_cpu_info import VirtualizationCpuInfo
    from intersight.model.virtualization_memory_capacity import VirtualizationMemoryCapacity
    from intersight.model.virtualization_product_info import VirtualizationProductInfo
    from intersight.model.virtualization_vmware_cluster_relationship import VirtualizationVmwareClusterRelationship
    from intersight.model.virtualization_vmware_datacenter_relationship import VirtualizationVmwareDatacenterRelationship
    from intersight.model.virtualization_vmware_datastore_relationship import VirtualizationVmwareDatastoreRelationship
    from intersight.model.virtualization_vmware_distributed_network_relationship import VirtualizationVmwareDistributedNetworkRelationship
    from intersight.model.virtualization_vmware_distributed_switch_relationship import VirtualizationVmwareDistributedSwitchRelationship
    from intersight.model.virtualization_vmware_host_all_of import VirtualizationVmwareHostAllOf
    from intersight.model.virtualization_vmware_resource_consumption import VirtualizationVmwareResourceConsumption
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['ComputePhysicalSummaryRelationship'] = ComputePhysicalSummaryRelationship
    globals()['DisplayNames'] = DisplayNames
    globals()['HyperflexNodeRelationship'] = HyperflexNodeRelationship
    globals()['InfraHardwareInfo'] = InfraHardwareInfo
    globals()['MoBaseMoRelationship'] = MoBaseMoRelationship
    globals()['MoTag'] = MoTag
    globals()['MoVersionContext'] = MoVersionContext
    globals()['VirtualizationBaseHost'] = VirtualizationBaseHost
    globals()['VirtualizationComputeCapacity'] = VirtualizationComputeCapacity
    globals()['VirtualizationCpuInfo'] = VirtualizationCpuInfo
    globals()['VirtualizationMemoryCapacity'] = VirtualizationMemoryCapacity
    globals()['VirtualizationProductInfo'] = VirtualizationProductInfo
    globals()['VirtualizationVmwareClusterRelationship'] = VirtualizationVmwareClusterRelationship
    globals()['VirtualizationVmwareDatacenterRelationship'] = VirtualizationVmwareDatacenterRelationship
    globals()['VirtualizationVmwareDatastoreRelationship'] = VirtualizationVmwareDatastoreRelationship
    globals()['VirtualizationVmwareDistributedNetworkRelationship'] = VirtualizationVmwareDistributedNetworkRelationship
    globals()['VirtualizationVmwareDistributedSwitchRelationship'] = VirtualizationVmwareDistributedSwitchRelationship
    globals()['VirtualizationVmwareHostAllOf'] = VirtualizationVmwareHostAllOf
    globals()['VirtualizationVmwareResourceConsumption'] = VirtualizationVmwareResourceConsumption


class VirtualizationVmwareHost(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('class_id',): {
            'VIRTUALIZATION.VMWAREHOST': "virtualization.VmwareHost",
        },
        ('object_type',): {
            'VIRTUALIZATION.VMWAREHOST': "virtualization.VmwareHost",
        },
        ('hw_power_state',): {
            'UNKNOWN': "Unknown",
            'POWERINGON': "PoweringOn",
            'POWEREDON': "PoweredOn",
            'POWERINGOFF': "PoweringOff",
            'POWEREDOFF': "PoweredOff",
            'STANDBY': "StandBy",
            'PAUSED': "Paused",
            'REBOOTING': "Rebooting",
            'EMPTY': "",
        },
        ('hypervisor_type',): {
            'ESXI': "ESXi",
            'HYPER-V': "Hyper-V",
            'UNKNOWN': "Unknown",
        },
        ('status',): {
            'UNKNOWN': "Unknown",
            'DEGRADED': "Degraded",
            'CRITICAL': "Critical",
            'OK': "Ok",
        },
    }

    validations = {
        ('uuid',): {
            'regex': {
                'pattern': r'^$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'boot_time': (datetime,),  # noqa: E501
            'connection_state': (str,),  # noqa: E501
            'dc_inv_path': (str,),  # noqa: E501
            'dns_servers': ([str], none_type,),  # noqa: E501
            'hw_power_state': (str,),  # noqa: E501
            'is_ssh_enabled': (bool,),  # noqa: E501
            'network_adapter_count': (int,),  # noqa: E501
            'ntp_servers': ([str], none_type,),  # noqa: E501
            'resource_consumed': (VirtualizationVmwareResourceConsumption,),  # noqa: E501
            'storage_adapter_count': (int,),  # noqa: E501
            'time_zone': (str,),  # noqa: E501
            'vcenter_host_id': (str,),  # noqa: E501
            'cluster': (VirtualizationVmwareClusterRelationship,),  # noqa: E501
            'datacenter': (VirtualizationVmwareDatacenterRelationship,),  # noqa: E501
            'datastores': ([VirtualizationVmwareDatastoreRelationship], none_type,),  # noqa: E501
            'distributed_networks': ([VirtualizationVmwareDistributedNetworkRelationship], none_type,),  # noqa: E501
            'distributed_switches': ([VirtualizationVmwareDistributedSwitchRelationship], none_type,),  # noqa: E501
            'hyper_flex_node': (HyperflexNodeRelationship,),  # noqa: E501
            'server': (ComputePhysicalSummaryRelationship,),  # noqa: E501
            'account_moid': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'domain_group_moid': (str,),  # noqa: E501
            'mod_time': (datetime,),  # noqa: E501
            'moid': (str,),  # noqa: E501
            'owners': ([str], none_type,),  # noqa: E501
            'shared_scope': (str,),  # noqa: E501
            'tags': ([MoTag], none_type,),  # noqa: E501
            'version_context': (MoVersionContext,),  # noqa: E501
            'ancestors': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'parent': (MoBaseMoRelationship,),  # noqa: E501
            'permission_resources': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'display_names': (DisplayNames,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
            'cpu_info': (VirtualizationCpuInfo,),  # noqa: E501
            'hardware_info': (InfraHardwareInfo,),  # noqa: E501
            'hypervisor_type': (str,),  # noqa: E501
            'identity': (str,),  # noqa: E501
            'maintenance_mode': (bool,),  # noqa: E501
            'memory_capacity': (VirtualizationMemoryCapacity,),  # noqa: E501
            'model': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'processor_capacity': (VirtualizationComputeCapacity,),  # noqa: E501
            'product_info': (VirtualizationProductInfo,),  # noqa: E501
            'serial': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'up_time': (str,),  # noqa: E501
            'uuid': (str,),  # noqa: E501
            'vendor': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        val = {
        }
        if not val:
            return None
        return {'class_id': val}

    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'boot_time': 'BootTime',  # noqa: E501
        'connection_state': 'ConnectionState',  # noqa: E501
        'dc_inv_path': 'DcInvPath',  # noqa: E501
        'dns_servers': 'DnsServers',  # noqa: E501
        'hw_power_state': 'HwPowerState',  # noqa: E501
        'is_ssh_enabled': 'IsSshEnabled',  # noqa: E501
        'network_adapter_count': 'NetworkAdapterCount',  # noqa: E501
        'ntp_servers': 'NtpServers',  # noqa: E501
        'resource_consumed': 'ResourceConsumed',  # noqa: E501
        'storage_adapter_count': 'StorageAdapterCount',  # noqa: E501
        'time_zone': 'TimeZone',  # noqa: E501
        'vcenter_host_id': 'VcenterHostId',  # noqa: E501
        'cluster': 'Cluster',  # noqa: E501
        'datacenter': 'Datacenter',  # noqa: E501
        'datastores': 'Datastores',  # noqa: E501
        'distributed_networks': 'DistributedNetworks',  # noqa: E501
        'distributed_switches': 'DistributedSwitches',  # noqa: E501
        'hyper_flex_node': 'HyperFlexNode',  # noqa: E501
        'server': 'Server',  # noqa: E501
        'account_moid': 'AccountMoid',  # noqa: E501
        'create_time': 'CreateTime',  # noqa: E501
        'domain_group_moid': 'DomainGroupMoid',  # noqa: E501
        'mod_time': 'ModTime',  # noqa: E501
        'moid': 'Moid',  # noqa: E501
        'owners': 'Owners',  # noqa: E501
        'shared_scope': 'SharedScope',  # noqa: E501
        'tags': 'Tags',  # noqa: E501
        'version_context': 'VersionContext',  # noqa: E501
        'ancestors': 'Ancestors',  # noqa: E501
        'parent': 'Parent',  # noqa: E501
        'permission_resources': 'PermissionResources',  # noqa: E501
        'display_names': 'DisplayNames',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
        'cpu_info': 'CpuInfo',  # noqa: E501
        'hardware_info': 'HardwareInfo',  # noqa: E501
        'hypervisor_type': 'HypervisorType',  # noqa: E501
        'identity': 'Identity',  # noqa: E501
        'maintenance_mode': 'MaintenanceMode',  # noqa: E501
        'memory_capacity': 'MemoryCapacity',  # noqa: E501
        'model': 'Model',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'processor_capacity': 'ProcessorCapacity',  # noqa: E501
        'product_info': 'ProductInfo',  # noqa: E501
        'serial': 'Serial',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'up_time': 'UpTime',  # noqa: E501
        'uuid': 'Uuid',  # noqa: E501
        'vendor': 'Vendor',  # noqa: E501
    }

    read_only_vars = {
        'datastores',  # noqa: E501
        'distributed_networks',  # noqa: E501
        'distributed_switches',  # noqa: E501
        'account_moid',  # noqa: E501
        'create_time',  # noqa: E501
        'domain_group_moid',  # noqa: E501
        'mod_time',  # noqa: E501
        'shared_scope',  # noqa: E501
        'ancestors',  # noqa: E501
        'permission_resources',  # noqa: E501
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """VirtualizationVmwareHost - a model defined in OpenAPI

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "virtualization.VmwareHost", must be one of ["virtualization.VmwareHost", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "virtualization.VmwareHost", must be one of ["virtualization.VmwareHost", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            boot_time (datetime): The time when this host booted up.. [optional]  # noqa: E501
            connection_state (str): Indicates if the host is connected to the vCenter. Values are connected, not connected.. [optional]  # noqa: E501
            dc_inv_path (str): This field stores the inventory path of a datacenter. Used in host maintenance action.. [optional]  # noqa: E501
            dns_servers ([str], none_type): [optional]  # noqa: E501
            hw_power_state (str): Is the host Powered-up or Powered-down. * `Unknown` - The entity's power state is unknown. * `PoweringOn` - The entity is powering on. * `PoweredOn` - The entity is powered on. * `PoweringOff` - The entity is powering off. * `PoweredOff` - The entity is powered down. * `StandBy` - The entity is in standby mode. * `Paused` - The entity is in pause state. * `Rebooting` - The entity reboot is in progress. * `` - The entity's power state is not available.. [optional] if omitted the server will use the default value of "Unknown"  # noqa: E501
            is_ssh_enabled (bool): True if SSH is enabled in the host, false otherwise.. [optional]  # noqa: E501
            network_adapter_count (int): The count of all network adapters attached to this host.. [optional]  # noqa: E501
            ntp_servers ([str], none_type): [optional]  # noqa: E501
            resource_consumed (VirtualizationVmwareResourceConsumption): [optional]  # noqa: E501
            storage_adapter_count (int): The count of all storage adapters attached to this host.. [optional]  # noqa: E501
            time_zone (str): Time zone this host is in.. [optional]  # noqa: E501
            vcenter_host_id (str): The identity of this host within vCenter (optional).. [optional]  # noqa: E501
            cluster (VirtualizationVmwareClusterRelationship): [optional]  # noqa: E501
            datacenter (VirtualizationVmwareDatacenterRelationship): [optional]  # noqa: E501
            datastores ([VirtualizationVmwareDatastoreRelationship], none_type): An array of relationships to virtualizationVmwareDatastore resources.. [optional]  # noqa: E501
            distributed_networks ([VirtualizationVmwareDistributedNetworkRelationship], none_type): An array of relationships to virtualizationVmwareDistributedNetwork resources.. [optional]  # noqa: E501
            distributed_switches ([VirtualizationVmwareDistributedSwitchRelationship], none_type): An array of relationships to virtualizationVmwareDistributedSwitch resources.. [optional]  # noqa: E501
            hyper_flex_node (HyperflexNodeRelationship): [optional]  # noqa: E501
            server (ComputePhysicalSummaryRelationship): [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str], none_type): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag], none_type): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            cpu_info (VirtualizationCpuInfo): [optional]  # noqa: E501
            hardware_info (InfraHardwareInfo): [optional]  # noqa: E501
            hypervisor_type (str): Identifies the broad type of the underlying hypervisor. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.. [optional] if omitted the server will use the default value of "ESXi"  # noqa: E501
            identity (str): The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).. [optional]  # noqa: E501
            maintenance_mode (bool): Is this host in maintenance mode. Set to true or false.. [optional]  # noqa: E501
            memory_capacity (VirtualizationMemoryCapacity): [optional]  # noqa: E501
            model (str): Commercial model information about this hardware.. [optional]  # noqa: E501
            name (str): Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.. [optional]  # noqa: E501
            processor_capacity (VirtualizationComputeCapacity): [optional]  # noqa: E501
            product_info (VirtualizationProductInfo): [optional]  # noqa: E501
            serial (str): Serial number of this host (internally generated).. [optional]  # noqa: E501
            status (str): Host health status, as reported by the hypervisor platform. * `Unknown` - Entity status is unknown. * `Degraded` - State is degraded, and might impact normal operation of the entity. * `Critical` - Entity is in a critical state, impacting operations. * `Ok` - Entity status is in a stable state, operating normally.. [optional] if omitted the server will use the default value of "Unknown"  # noqa: E501
            up_time (str): The uptime of the host, stored as Duration (from w3c).. [optional]  # noqa: E501
            uuid (str): Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.. [optional]  # noqa: E501
            vendor (str): Commercial vendor details of this hardware.. [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "virtualization.VmwareHost")
        object_type = kwargs.get('object_type', "virtualization.VmwareHost")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """VirtualizationVmwareHost - a model defined in OpenAPI

        Keyword Args:
            class_id (str): The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the type of the payload when marshaling and unmarshaling data.. defaults to "virtualization.VmwareHost", must be one of ["virtualization.VmwareHost", ]  # noqa: E501
            object_type (str): The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.. defaults to "virtualization.VmwareHost", must be one of ["virtualization.VmwareHost", ]  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            boot_time (datetime): The time when this host booted up.. [optional]  # noqa: E501
            connection_state (str): Indicates if the host is connected to the vCenter. Values are connected, not connected.. [optional]  # noqa: E501
            dc_inv_path (str): This field stores the inventory path of a datacenter. Used in host maintenance action.. [optional]  # noqa: E501
            dns_servers ([str], none_type): [optional]  # noqa: E501
            hw_power_state (str): Is the host Powered-up or Powered-down. * `Unknown` - The entity's power state is unknown. * `PoweringOn` - The entity is powering on. * `PoweredOn` - The entity is powered on. * `PoweringOff` - The entity is powering off. * `PoweredOff` - The entity is powered down. * `StandBy` - The entity is in standby mode. * `Paused` - The entity is in pause state. * `Rebooting` - The entity reboot is in progress. * `` - The entity's power state is not available.. [optional] if omitted the server will use the default value of "Unknown"  # noqa: E501
            is_ssh_enabled (bool): True if SSH is enabled in the host, false otherwise.. [optional]  # noqa: E501
            network_adapter_count (int): The count of all network adapters attached to this host.. [optional]  # noqa: E501
            ntp_servers ([str], none_type): [optional]  # noqa: E501
            resource_consumed (VirtualizationVmwareResourceConsumption): [optional]  # noqa: E501
            storage_adapter_count (int): The count of all storage adapters attached to this host.. [optional]  # noqa: E501
            time_zone (str): Time zone this host is in.. [optional]  # noqa: E501
            vcenter_host_id (str): The identity of this host within vCenter (optional).. [optional]  # noqa: E501
            cluster (VirtualizationVmwareClusterRelationship): [optional]  # noqa: E501
            datacenter (VirtualizationVmwareDatacenterRelationship): [optional]  # noqa: E501
            datastores ([VirtualizationVmwareDatastoreRelationship], none_type): An array of relationships to virtualizationVmwareDatastore resources.. [optional]  # noqa: E501
            distributed_networks ([VirtualizationVmwareDistributedNetworkRelationship], none_type): An array of relationships to virtualizationVmwareDistributedNetwork resources.. [optional]  # noqa: E501
            distributed_switches ([VirtualizationVmwareDistributedSwitchRelationship], none_type): An array of relationships to virtualizationVmwareDistributedSwitch resources.. [optional]  # noqa: E501
            hyper_flex_node (HyperflexNodeRelationship): [optional]  # noqa: E501
            server (ComputePhysicalSummaryRelationship): [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str], none_type): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag], none_type): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            cpu_info (VirtualizationCpuInfo): [optional]  # noqa: E501
            hardware_info (InfraHardwareInfo): [optional]  # noqa: E501
            hypervisor_type (str): Identifies the broad type of the underlying hypervisor. * `ESXi` - The hypervisor running on the HyperFlex cluster is a Vmware ESXi hypervisor of any version. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.. [optional] if omitted the server will use the default value of "ESXi"  # noqa: E501
            identity (str): The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).. [optional]  # noqa: E501
            maintenance_mode (bool): Is this host in maintenance mode. Set to true or false.. [optional]  # noqa: E501
            memory_capacity (VirtualizationMemoryCapacity): [optional]  # noqa: E501
            model (str): Commercial model information about this hardware.. [optional]  # noqa: E501
            name (str): Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.. [optional]  # noqa: E501
            processor_capacity (VirtualizationComputeCapacity): [optional]  # noqa: E501
            product_info (VirtualizationProductInfo): [optional]  # noqa: E501
            serial (str): Serial number of this host (internally generated).. [optional]  # noqa: E501
            status (str): Host health status, as reported by the hypervisor platform. * `Unknown` - Entity status is unknown. * `Degraded` - State is degraded, and might impact normal operation of the entity. * `Critical` - Entity is in a critical state, impacting operations. * `Ok` - Entity status is in a stable state, operating normally.. [optional] if omitted the server will use the default value of "Unknown"  # noqa: E501
            up_time (str): The uptime of the host, stored as Duration (from w3c).. [optional]  # noqa: E501
            uuid (str): Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.. [optional]  # noqa: E501
            vendor (str): Commercial vendor details of this hardware.. [optional]  # noqa: E501
        """

        class_id = kwargs.get('class_id', "virtualization.VmwareHost")
        object_type = kwargs.get('object_type', "virtualization.VmwareHost")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        kwargs.update(required_args)
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              VirtualizationBaseHost,
              VirtualizationVmwareHostAllOf,
          ],
          'oneOf': [
          ],
        }
